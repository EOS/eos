on:
    push:
        branches: [ release, master, testing ]

    pull_request:

    release:
        types: [ published ]

name: Build/Check/Deploy for PyPI

concurrency:
  group: pypi, ${{ github.head_ref }}
  cancel-in-progress: true

jobs:
    build_wheels:
        strategy:
            matrix:
                include:
                  # Linux
                  - { arch: x86_64,  cxxflags: '-march=x86-64',    boost_python_suffix: 310, version: cp310, runner: ubuntu-20.04         }
                  #- { arch: x86_64,  cxxflags: '-march=x86-64',    boost_python_suffix: 311, version: cp311, runner: ubuntu-20.04         }
                  #- { arch: x86_64,  cxxflags: '-march=x86-64',    boost_python_suffix: 312, version: cp312, runner: ubuntu-20.04         }
                  #- { arch: aarch64, cxxflags: '-march=armv8.5-a', boost_python_suffix: 310, version: cp310, runner: ubuntu-24.04-aarch64 }
                  # macOS
                  - { arch: x86_64,  cxxflags: '-march=x86-64',    boost_python_suffix: 312, version: cp312, runner: macos-13,
                      prefix: '/usr/local',
                      image_sha256: 'e532582907eaaa9b25db587563b6b45a4b3554d9b8eff30dda8dcbd7a9c84ec7'                                    }
                  #- { arch: arm64,   cxxflags: '-march=armv8.5-a', boost_python_suffix: 312, version: cp312, runner: macos-14,
                  #    prefix: '/opt/homebrew',
                  #    image_sha256: 'a444d8df74a56826cf58aaac2cad03b514f1557b8a98882cc74ac3cc5eab3b57'                                    }
        runs-on: ${{ matrix.runner }}
        name: Build and check EOS wheels on ${{ matrix.arch }} for Python version ${{ matrix.version }} on runner ${{ matrix.runner }}
        steps:
            - name: Checkout git repository
              uses: actions/checkout@v4

            - name: Install build dependencies and image
              if: ${{ runner.os == 'macOS' }}
              run: |
                brew install \
                  autoconf automake libtool m4 make pkg-config
                export TOKEN="$(curl "https://ghcr.io/token?scope=repository:eos/docker.io:pull" | awk -F'"' '$0=$4')"
                curl \
                  -L \
                  -H "Authorization: Bearer ${TOKEN}" \
                  -H "Accept: application/vnd.oci.image.layer.v1.tar" \
                  --cookie /dev/null \
                  --output image.tar.gz \
                  https://ghcr.io/v2/eos/docker.io/blobs/sha256:${{ matrix.image_sha256}}
                gtar \
                  --no-overwrite-dir --touch \
                  --strip-components=2 \
                  -C ${{ matrix.prefix }} \
                  -zxf ./image.tar.gz
                pip3 install --upgrade pip setuptools wheel numpy>=2 scipy dynesty

            - name: Determine if this is a prerelease build
              id: prerelease
              run: |
                if [[ ${GITHUB_EVENT_NAME} != "release" ]] ; then
                    echo "option=--enable-prerelease=${{ github.run_number }}" >> $GITHUB_OUTPUT
                fi

            - name: Create a package directory to make cibuildwheel happy on macOS
              if: ${{ runner.os == 'macOS' }}
              run: |
                mkdir eoshep
                ./autogen.bash
                export BOOST_PYTHON_SKIP=yes
                export CXXFLAGS="-O2 -g ${{ matrix.cxxflags }}"
                ./configure \
                  --disable-cli \
                  ${{ steps.prerelease.outputs.option }} \
                  --with-boost-python-suffix=${{ matrix.boost_python_suffix }} \
                  --enable-lto
                make -j4 all
                make -j4 check VERBOSE=1
                make -C eos -j4 install
                make -C python eoshep-before DESTDIR=$(pwd)/eoshep

            - name: Create a package directory to make cibuildwheel happy on Linux
              if: ${{ runner.os != 'macOS' }}
              run: |
                mkdir eoshep
                touch eoshep/setup.py

            - name: Build EOS, run tests, and create wheels
              uses: pypa/cibuildwheel@v2.16.5
              with:
                package-dir: eoshep
              env:
                CIBW_BUILD: ${{ matrix.version }}-*
                CIBW_SKIP: \*-musllinux_*
                CIBW_ARCHS: ${{ matrix.arch }}
                CIBW_MANYLINUX_X86_64_IMAGE: eoshep/manylinux_2_28@sha256:03c63bfb48c45c10915262740c1633fa6970485d4395ecb99bfdfe7fc3b12290
                CIBW_MANYLINUX_AARCH64_IMAGE: eoshep/manylinux_2_28@sha256:0a27b0ae8f0394f48ed5b89bed523d20a3c1de96e2af4f6de987c2e5d752b52e
                # for Linux builds, the preparations needs to be done within the Docker container
                CIBW_BEFORE_BUILD_LINUX: |
                  pushd {project}
                  ./autogen.bash
                  export BOOST_PYTHON_SKIP=yes
                  export CXXFLAGS="-O2 -g ${{ matrix.cxxflags }}"
                  ./configure \
                    --disable-cli \
                    ${{ steps.prerelease.outputs.option }} \
                    --with-boost-python-suffix=${{ matrix.boost_python_suffix }} \
                    --enable-lto
                  make -j4 all
                  make -j4 check VERBOSE=1
                  make -C eos -j4 install
                  make -C python eoshep-before DESTDIR={package}
                  popd
                CIBW_TEST_COMMAND: |
                  cd /
                  python3 -c 'import eos ; print(eos.__version__)'

            - name: Upload wheels as artifacts
              uses: actions/upload-artifact@v4
              with:
                name: wheel-${{ matrix.arch }}-${{ matrix.version }}
                path: ./wheelhouse/*.whl

    upload_pypi:
        needs: [ build_wheels ]
        if: ${{ github.event_name == 'release' || (github.event_name == 'push' && github.ref == 'refs/heads/release') }}
        runs-on: ubuntu-latest
        name: Deploy EOS wheels to PyPI
        steps:
            - uses: actions/download-artifact@v4
              with:
                pattern: wheel-*
                merge-multiple: true
                path: dist

            - uses: pypa/gh-action-pypi-publish@v1.4.2
              with:
                user:     ${{ secrets.TWINE_USERNAME }}
                password: ${{ secrets.TWINE_PASSWORD }}
                skip_existing: true
