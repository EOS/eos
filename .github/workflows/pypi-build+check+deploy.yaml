on:
    push:
        branches: [ master, testing ]

    pull_request:

    release:
        types: [ published ]

name: Build/Check/Deploy for PyPI

concurrency:
  group: pypi, ${{ github.head_ref }}
  cancel-in-progress: true

jobs:
    build_wheels:
        runs-on: ubuntu-20.04
        strategy:
            matrix:
                include:
                  - { arch: x86_64,  cxxflags: '-march=x86-64', boost_python_suffix: 38,  version: cp38  }
                  - { arch: x86_64,  cxxflags: '-march=x86-64', boost_python_suffix: 39,  version: cp39  }
                  - { arch: x86_64,  cxxflags: '-march=x86-64', boost_python_suffix: 310, version: cp310 }
                  - { arch: x86_64,  cxxflags: '-march=x86-64', boost_python_suffix: 311, version: cp311 }
                  - { arch: x86_64,  cxxflags: '-march=x86-64', boost_python_suffix: 312, version: cp312 }
        name: Build and check EOS wheels on ${{ matrix.arch }} for Python version ${{ matrix.version }}
        steps:
            - name: Checkout git repository
              uses: actions/checkout@v4

            - name: Install QEMU and emulation on the Ubuntu runner
              if: runner.os == 'Linux'
              run: |
                sudo apt update
                sudo apt install qemu-user-static

            - name: Create a package directory to make cibuildwheel happy
              run: |
                mkdir eoshep
                touch eoshep/setup.py

            - name: Determine if this is a prerelease build
              id: prerelease
              run: |
                if [[ ${GITHUB_EVENT_NAME} != "release" ]] ; then
                    echo "option=--enable-prerelease=${{ github.run_number }}" >> $GITHUB_OUTPUT
                fi

            - name: Build EOS, run tests, and create wheels
              uses: pypa/cibuildwheel@v2.16.5
              with:
                package-dir: eoshep
              env:
                CIBW_BUILD: ${{ matrix.version}}-*
                CIBW_SKIP: \*-musllinux_*
                CIBW_ARCHS: ${{ matrix.arch}}
                CIBW_MANYLINUX_X86_64_IMAGE: eoshep/manylinux_2_28@sha256:4ad643310668f115e949c1625f6dc317febf5c55344c2fe413503c4f42fa77e0
                CIBW_MANYLINUX_AARCH64_IMAGE: eoshep/manylinux_2_28@sha256:9608f1fab355284784d15f3d5b82f8c60de783e004f0cda475e651f5b1e87b84
                CIBW_BEFORE_BUILD_LINUX: |
                  pushd {project}
                  ./autogen.bash
                  export BOOST_PYTHON_SKIP=yes
                  export CXXFLAGS="-O2 -g ${{ matrix.cxxflags }}"
                  ./configure \
                    --disable-cli \
                    ${{ steps.prerelease.outputs.option }} \
                    --with-boost-python-suffix=${{ matrix.boost_python_suffix }} \
                    --enable-lto
                  make -j4 all
                  make -j4 check VERBOSE=1
                  make -C python eoshep-before DESTDIR={package}
                  popd
                CIBW_TEST_COMMAND: |
                  cd /
                  python3 -c 'import eos ; print(eos.__version__)'

            - name: Upload wheels as artifacts
              uses: actions/upload-artifact@v4
              with:
                name: wheel-${{ matrix.arch }}-${{ matrix.version }}
                path: ./wheelhouse/*.whl

    upload_pypi:
        needs: [ build_wheels ]
        if: ${{ github.event_name == 'release' || (github.event_name == 'push' && github.ref == 'refs/heads/master') }}
        runs-on: ubuntu-latest
        name: Deploy EOS wheels to PyPI
        steps:
            - uses: actions/download-artifact@v4
              with:
                pattern: wheel-*
                merge-multiple: true
                path: dist

            - uses: pypa/gh-action-pypi-publish@v1.4.2
              with:
                user:     ${{ secrets.TWINE_USERNAME }}
                password: ${{ secrets.TWINE_PASSWORD }}
                skip_existing: true
