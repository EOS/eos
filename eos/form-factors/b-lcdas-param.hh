/* vim: set sw=4 sts=4 et foldmethod=syntax : */

/*
 * Copyright (c) 2022 Danny van Dyk
 * Copyright (c) 2022 Philip LÃ¼ghausen
 *
 * This file is part of the EOS project. EOS is free software;
 * you can redistribute it and/or modify it under the terms of the GNU General
 * Public License version 2, as published by the Free Software Foundation.
 *
 * EOS is distributed in the hope that it will be useful, but WITHOUT ANY
 * WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more
 * details.
 *
 * You should have received a copy of the GNU General Public License along with
 * this program; if not, write to the Free Software Foundation, Inc., 59 Temple
 * Place, Suite 330, Boston, MA  02111-1307  USA
 */

#ifndef EOS_GUARD_EOS_FORM_FACTORS_B_LCDAS_PARAM_HH
#define EOS_GUARD_EOS_FORM_FACTORS_B_LCDAS_PARAM_HH 1

#include <eos/form-factors/b-lcdas.hh>
#include <eos/utils/diagnostics.hh>
#include <eos/utils/parameters.hh>
#include <eos/utils/options.hh>
#include <array>
#include <cmath>
#include <gsl/gsl_sf_gamma.h>
#include <gsl/gsl_sf_expint.h>

#include <gsl/gsl_spline.h>
#include <gsl/gsl_errno.h>
#include <stdexcept>
#include <string>
#include <vector>

namespace eos
{
    namespace b_lcdas
    {
        namespace aux
        {
            // Wrap Mathematica funtions and constants
            inline double mpow(const double x, const double a) {return std::pow(x, a);}
            inline double mexp(const double x) {return std::exp(x);}
            inline double mexpintei(const double x) {return gsl_sf_expint_Ei(x);}
            inline double mlog(const double x) {return std::log(x);}
            const double meulergamma = 0.577215664901533;
            const double meulergamma2 = std::pow(meulergamma, 2);
            const double mpi = 3.14159265358979;

            /*!
             * Mathematical expressions as pure functions
             */

            // Leading-order pieces

            double L0_phi_plus(const double omega0, const std::array<const double, 9> a){
                return 1/omega0 * (a[0] + a[2]/3. + a[4]/5. + a[6]/7. + a[8]/9.);
            }

            double L0inc_phi_plus(const double Omega, const double omega0, const std::array<const double, 9> a) {
                const double xOm = Omega / omega0;
                const double xOm2 = std::pow(xOm, 2);
                const double xOm3 = std::pow(xOm, 3);
                const double xOm4 = std::pow(xOm, 4);
                const double xOm5 = std::pow(xOm, 5);
                const double xOm6 = std::pow(xOm, 6);
                const double xOm7 = std::pow(xOm, 7);
                const double xOm8 = std::pow(xOm, 8);

                const double mexp = std::exp(-xOm);

                return 1/omega0 * (
                    +a[0]*(1. - mexp)
                    +a[1]*(mexp*xOm)
                    +a[2]*(0.3333333333333333 + mexp*(-0.3333333333333333 + 0.6666666666666666*xOm - 0.6666666666666666*xOm2))
                    +a[3]*(mexp*xOm*(1 - xOm + 0.3333333333333333*xOm2))
                    +a[4]*(0.2 + mexp*(-0.2 + 0.8*xOm - 1.6*xOm2 + 0.8*xOm3 - 0.13333333333333333*xOm4))
                    +a[5]*(mexp*xOm*(1 - 2.*xOm + 1.5555555555555556*xOm2 - 0.4444444444444444*xOm3 + 0.044444444444444446*xOm4))
                    +a[6]*(0.14285714285714285 + mexp*(-0.14285714285714285 + 0.8571428571428571*xOm - 2.5714285714285716*xOm2 + 2.4761904761904763*xOm3 - 1.0476190476190477*xOm4 + 0.19047619047619047*xOm5 - 0.012698412698412698*xOm6))
                    +a[7]*(mexp*xOm*(1 - 3.*xOm + 3.6666666666666665*xOm2 - 2.*xOm3 + 0.5333333333333333*xOm4 - 0.06666666666666667*xOm5 + 0.0031746031746031746*xOm6))
                    +a[8]*(0.1111111111111111 + mexp*(-0.1111111111111111 + 0.8888888888888888*xOm - 3.5555555555555554*xOm2 + 5.037037037037037*xOm3 - 3.4074074074074074*xOm4 + 1.1851851851851851*xOm5 - 0.21728395061728395*xOm6 + 0.019753086419753086*xOm7 - 0.0007054673721340388*xOm8))
                );
            }

            double B_phi_plus(const double Omega, const double sigma, const double omega0, const std::array<double, 9> a){
                const double xOm = Omega / omega0;
                const double xOm2 = std::pow(xOm, 2);
                const double xOm3 = std::pow(xOm, 3);
                const double xOm4 = std::pow(xOm, 4);
                const double xOm5 = std::pow(xOm, 5);
                const double xOm6 = std::pow(xOm, 6);
                const double xOm7 = std::pow(xOm, 7);
                const double xOm8 = std::pow(xOm, 8);
                const double xsg = sigma * omega0;
                const double xsg2 = std::pow(xsg, 2);
                const double xsg3 = std::pow(xsg, 3);
                const double xsg4 = std::pow(xsg, 4);
                const double xsg5 = std::pow(xsg, 5);
                const double xsg6 = std::pow(xsg, 6);
                const double xsg7 = std::pow(xsg, 7);
                const double xsg8 = std::pow(xsg, 8);

                return (
                    +a[0]*((1 + (-1. + xOm*(-1. - xsg))*mexp(xOm*(-1. - xsg)))*mpow(1. + xsg,-2.))
                    +a[1]*((-1. + xsg + (1 + xOm - xsg - xOm*xsg2 + xOm2*(1 + 2.*xsg + xsg2))*mexp(xOm*(-1. - xsg)))*mpow(1. + xsg,-3.))
                    +a[2]*((1 - 2.*xsg + xsg2 + (-1. + 2.*xsg + 2.*xOm2*xsg - xsg2 + 4.*xOm2*xsg2 + xOm*(-1. + xsg + xsg2 - xsg3) + xOm3*(-0.6666666666666666 - 2.*xsg - 2.*xsg2 - 0.6666666666666666*xsg3) + 2.*xOm2*xsg3)*mexp(xOm*(-1. - xsg)))*mpow(1. + xsg,-4.))
                    +a[3]*((-1. + 3.*xsg - 3.*xsg2 + xsg3 + (1 - 0.6666666666666666*xOm3 + 0.3333333333333333*xOm4 - 3.*xsg - 4.*xOm3*xsg + 1.3333333333333333*xOm4*xsg + 3.*xsg2 - 8.*xOm3*xsg2 + 2.*xOm4*xsg2 - xsg3 - 6.666666666666667*xOm3*xsg3 + 1.3333333333333333*xOm4*xsg3 + xOm*(1 - 2.*xsg + 2.*xsg3 - xsg4) - 2.*xOm3*xsg4 + 0.3333333333333333*xOm4*xsg4 + xOm2*(1 + 2.*xsg + 4.*xsg2 + 6.*xsg3 + 3.*xsg4))*mexp(xOm*(-1. - xsg)))*mpow(1. + xsg,-5.))
                    +a[4]*((1 - 4.*xsg + 6.*xsg2 - 4.*xsg3 + xsg4 + (-1. + 0.6666666666666666*xOm4 - 0.13333333333333333*xOm5 + 4.*xsg + 4.*xOm2*xsg + 4.*xOm4*xsg - 0.6666666666666666*xOm5*xsg - 6.*xsg2 + 8.*xOm2*xsg2 + 9.333333333333334*xOm4*xsg2 - 1.3333333333333333*xOm5*xsg2 + 4.*xsg3 + 8.*xOm2*xsg3 + 10.666666666666666*xOm4*xsg3 - 1.3333333333333333*xOm5*xsg3 - xsg4 + 8.*xOm2*xsg4 + 6.*xOm4*xsg4 - 0.6666666666666666*xOm5*xsg4 + xOm3*(-1.3333333333333333 - 6.666666666666667*xsg - 16.*xsg2 - 21.333333333333332*xsg3 - 14.666666666666666*xsg4 - 4.*xsg5) + xOm*(-1. + 3.*xsg - 2.*xsg2 - 2.*xsg3 + 3.*xsg4 - xsg5) + 4.*xOm2*xsg5 + 1.3333333333333333*xOm4*xsg5 - 0.13333333333333333*xOm5*xsg5)*mexp(xOm*(-1. - xsg)))*mpow(1. + xsg,-6.))
                    +a[5]*((-1. + 5.*xsg - 10.*xsg2 + 10.*xsg3 - 5.*xsg4 + xsg5 + (1 - 1.3333333333333333*xOm3 + 1.3333333333333333*xOm4 - 0.4*xOm5 + 0.044444444444444446*xOm6 - 5.*xsg - 10.666666666666666*xOm3*xsg + 8.666666666666666*xOm4*xsg - 2.6666666666666665*xOm5*xsg + 0.26666666666666666*xOm6*xsg + 10.*xsg2 - 30.666666666666668*xOm3*xsg2 + 24.666666666666668*xOm4*xsg2 - 7.333333333333333*xOm5*xsg2 + 0.6666666666666666*xOm6*xsg2 - 10.*xsg3 - 48.*xOm3*xsg3 + 38.666666666666664*xOm4*xsg3 - 10.666666666666666*xOm5*xsg3 + 0.8888888888888888*xOm6*xsg3 + 5.*xsg4 - 46.666666666666664*xOm3*xsg4 + 34.666666666666664*xOm4*xsg4 - 8.666666666666666*xOm5*xsg4 + 0.6666666666666666*xOm6*xsg4 - xsg5 - 26.666666666666668*xOm3*xsg5 + 16.666666666666668*xOm4*xsg5 - 3.7333333333333334*xOm5*xsg5 + 0.26666666666666666*xOm6*xsg5 + xOm*(1 - 4.*xsg + 5.*xsg2 - 5.*xsg4 + 4.*xsg5 - xsg6) - 6.666666666666667*xOm3*xsg6 + 3.3333333333333335*xOm4*xsg6 - 0.6666666666666666*xOm5*xsg6 + 0.044444444444444446*xOm6*xsg6 + xOm2*(1 + 2.*xsg + 11.*xsg2 + 20.*xsg3 + 15.*xsg4 + 10.*xsg5 + 5.*xsg6))*mexp(xOm*(-1. - xsg)))*mpow(1. + xsg,-7.))
                    +a[6]*((1 - 6.*xsg + 15.*xsg2 - 20.*xsg3 + 15.*xsg4 - 6.*xsg5 + xsg6 + (-1. + 2.*xOm4 - 0.9333333333333333*xOm5 + 0.17777777777777778*xOm6 - 0.012698412698412698*xOm7 + 6.*xsg + 6.*xOm2*xsg + 16.*xOm4*xsg - 7.066666666666666*xOm5*xsg + 1.3333333333333333*xOm6*xsg - 0.08888888888888889*xOm7*xsg - 15.*xsg2 + 12.*xOm2*xsg2 + 54.*xOm4*xsg2 - 23.333333333333332*xOm5*xsg2 + 4.266666666666667*xOm6*xsg2 - 0.26666666666666666*xOm7*xsg2 + 20.*xsg3 + 26.*xOm2*xsg3 + 102.66666666666667*xOm4*xsg3 - 43.333333333333336*xOm5*xsg3 + 7.555555555555555*xOm6*xsg3 - 0.4444444444444444*xOm7*xsg3 - 15.*xsg4 + 40.*xOm2*xsg4 + 120.66666666666667*xOm4*xsg4 - 48.666666666666664*xOm5*xsg4 + 8.*xOm6*xsg4 - 0.4444444444444444*xOm7*xsg4 + 6.*xsg5 + 26.*xOm2*xsg5 + 88.*xOm4*xsg5 - 32.93333333333333*xOm5*xsg5 + 5.066666666666666*xOm6*xsg5 - 0.26666666666666666*xOm7*xsg5 - xsg6 + 12.*xOm2*xsg6 + 36.666666666666664*xOm4*xsg6 - 12.4*xOm5*xsg6 + 1.7777777777777777*xOm6*xsg6 - 0.08888888888888889*xOm7*xsg6 + xOm3*(-2. - 14.*xsg - 50.*xsg2 - 99.33333333333333*xsg3 - 118.*xsg4 - 90.*xsg5 - 43.333333333333336*xsg6 - 10.*xsg7) + xOm*(-1. + 5.*xsg - 9.*xsg2 + 5.*xsg3 + 5.*xsg4 - 9.*xsg5 + 5.*xsg6 - xsg7) + 6.*xOm2*xsg7 + 6.666666666666667*xOm4*xsg7 - 2.*xOm5*xsg7 + 0.26666666666666666*xOm6*xsg7 - 0.012698412698412698*xOm7*xsg7)*mexp(xOm*(-1. - xsg)))*mpow(1. + xsg,-8.))
                    +a[7]*((-1. + 7.*xsg - 21.*xsg2 + 35.*xsg3 - 35.*xsg4 + 21.*xsg5 - 7.*xsg6 + xsg7 + (1 - 2.*xOm3 + 3.*xOm4 - 1.7333333333333334*xOm5 + 0.4888888888888889*xOm6 - 0.06349206349206349*xOm7 + 0.0031746031746031746*xOm8 - 7.*xsg - 20.*xOm3*xsg + 26.*xOm4*xsg - 15.2*xOm5*xsg + 4.177777777777778*xOm6*xsg - 0.5333333333333333*xOm7*xsg + 0.025396825396825397*xOm8*xsg + 21.*xsg2 - 76.*xOm3*xsg2 + 102.*xOm4*xsg2 - 58.4*xOm5*xsg2 + 15.733333333333333*xOm6*xsg2 - 1.9555555555555555*xOm7*xsg2 + 0.08888888888888889*xOm8*xsg2 - 35.*xsg3 - 174.66666666666666*xOm3*xsg3 + 231.33333333333334*xOm4*xsg3 - 129.33333333333334*xOm5*xsg3 + 34.044444444444444*xOm6*xsg3 - 4.088888888888889*xOm7*xsg3 + 0.17777777777777778*xOm8*xsg3 + 35.*xsg4 - 261.3333333333333*xOm3*xsg4 + 332.*xOm4*xsg4 - 181.33333333333334*xOm5*xsg4 + 46.22222222222222*xOm6*xsg4 - 5.333333333333333*xOm7*xsg4 + 0.2222222222222222*xOm8*xsg4 - 21.*xsg5 - 252.*xOm3*xsg5 + 312.6666666666667*xOm4*xsg5 - 165.06666666666666*xOm5*xsg5 + 40.266666666666666*xOm6*xsg5 - 4.444444444444445*xOm7*xsg5 + 0.17777777777777778*xOm8*xsg5 + 7.*xsg6 - 158.66666666666666*xOm3*xsg6 + 191.33333333333334*xOm4*xsg6 - 95.2*xOm5*xsg6 + 21.955555555555556*xOm6*xsg6 - 2.311111111111111*xOm7*xsg6 + 0.08888888888888889*xOm8*xsg6 - xsg7 - 65.33333333333333*xOm3*xsg7 + 70.*xOm4*xsg7 - 31.733333333333334*xOm5*xsg7 + 6.844444444444444*xOm6*xsg7 - 0.6857142857142857*xOm7*xsg7 + 0.025396825396825397*xOm8*xsg7 + xOm*(1 - 6.*xsg + 14.*xsg2 - 14.*xsg3 + 14.*xsg5 - 14.*xsg6 + 6.*xsg7 - xsg8) - 14.*xOm3*xsg8 + 11.666666666666666*xOm4*xsg8 - 4.666666666666667*xOm5*xsg8 + 0.9333333333333333*xOm6*xsg8 - 0.08888888888888889*xOm7*xsg8 + 0.0031746031746031746*xOm8*xsg8 + xOm2*(1 + 2.*xsg + 22.*xsg2 + 42.*xsg3 + 56.*xsg4 + 70.*xsg5 + 42.*xsg6 + 14.*xsg7 + 7.*xsg8))*mexp(xOm*(-1. - xsg)))*mpow(1. + xsg,-9.))
                    +a[8]*((1 - 8.*xsg + 28.*xsg2 - 56.*xsg3 + 70.*xsg4 - 56.*xsg5 + 28.*xsg6 - 8.*xsg7 + xsg8 + mexp(xOm*(-1. - xsg))*(-1. - xOm - 2.6666666666666665*xOm3 + 4.*xOm4 - 2.933333333333333*xOm5 + 1.0666666666666667*xOm6 - 0.20317460317460317*xOm7 + 0.01904761904761905*xOm8 + 8.*xsg + 7.*xOm*xsg + 8.*xOm2*xsg - 24.*xOm3*xsg + 40.*xOm4*xsg - 28.533333333333335*xOm5*xsg + 10.311111111111112*xOm6*xsg - 1.9301587301587302*xOm7*xsg + 0.17777777777777778*xOm8*xsg - 28.*xsg2 - 20.*xOm*xsg2 + 16.*xOm2*xsg2 - 112.*xOm3*xsg2 + 176.*xOm4*xsg2 - 124.8*xOm5*xsg2 + 44.44444444444444*xOm6*xsg2 - 8.177777777777777*xOm7*xsg2 + 0.7365079365079366*xOm8*xsg2 + 56.*xsg3 + 28.*xOm*xsg3 + 64.*xOm2*xsg3 - 293.3333333333333*xOm3*xsg3 + 458.6666666666667*xOm4*xsg3 - 321.06666666666666*xOm5*xsg3 + 112.35555555555555*xOm6*xsg3 - 20.266666666666666*xOm7*xsg3 + 1.7777777777777777*xOm8*xsg3 - 70.*xsg4 - 14.*xOm*xsg4 + 112.*xOm2*xsg4 - 501.3333333333333*xOm3*xsg4 + 781.3333333333334*xOm4*xsg4 - 536.*xOm5*xsg4 + 183.82222222222222*xOm6*xsg4 - 32.355555555555554*xOm7*xsg4 + 2.7555555555555555*xOm8*xsg4 + 56.*xsg5 - 14.*xOm*xsg5 + 112.*xOm2*xsg5 - 597.3333333333334*xOm3*xsg5 + 901.3333333333334*xOm4*xsg5 - 604.2666666666667*xOm5*xsg5 + 201.95555555555555*xOm6*xsg5 - 34.48888888888889*xOm7*xsg5 + 2.8444444444444446*xOm8*xsg5 - 28.*xsg6 + 28.*xOm*xsg6 + 112.*xOm2*xsg6 - 485.3333333333333*xOm3*xsg6 + 709.3333333333334*xOm4*xsg6 - 461.8666666666667*xOm5*xsg6 + 148.9777777777778*xOm6*xsg6 - 24.533333333333335*xOm7*xsg6 + 1.9555555555555555*xOm8*xsg6 + 8.*xsg7 - 20.*xOm*xsg7 + 64.*xOm2*xsg7 - 261.3333333333333*xOm3*xsg7 + 373.3333333333333*xOm4*xsg7 - 231.46666666666667*xOm5*xsg7 + 71.11111111111111*xOm6*xsg7 - 11.225396825396825*xOm7*xsg7 + 0.8634920634920635*xOm8*xsg7 - xsg8 + 7.*xOm*xsg8 + 16.*xOm2*xsg8 - 93.33333333333333*xOm3*xsg8 + 121.33333333333333*xOm4*xsg8 - 69.06666666666666*xOm5*xsg8 + 19.91111111111111*xOm6*xsg8 - 2.996825396825397*xOm7*xsg8 + 0.2222222222222222*xOm8*xsg8 + mpow(xOm,9.)*(-0.0007054673721340388 - 0.006349206349206349*xsg - 0.025396825396825397*xsg2 - 0.05925925925925926*xsg3 - 0.08888888888888889*xsg4 - 0.08888888888888889*xsg5 - 0.05925925925925926*xsg6 - 0.025396825396825397*xsg7 - 0.006349206349206349*xsg8 - 0.0007054673721340388*mpow(xsg,9.)) + (-1.*xOm + 8.*xOm2 - 18.666666666666668*xOm3 + 18.666666666666668*xOm4 - 9.333333333333334*xOm5 + 2.488888888888889*xOm6 - 0.35555555555555557*xOm7 + 0.025396825396825397*xOm8)*mpow(xsg,9.)))*mpow(1. + xsg,-10.))
                );
            }

            // Next-to-leading-order pieces

            double L0_Dphi_plus_eff_1(const double Egamma, const double mu, const double omega0, const std::array<const double, 9> a) {
                // Sum of all contributions 1a, 1b, 1c and 1d
                const double mlog = -0.11593151565841242 + std::log(std::pow(mu,2)/(Egamma*omega0));
                const double mlog2 = std::pow(mlog, 2);

                return 1/omega0 * (
                    +a[0]*(-1. + mlog2)
                    +a[1]*(2.*mlog)
                    +a[2]*(1. + 0.3333333333333333*mlog2)
                    +a[3]*(1.3333333333333333*mlog)
                    +a[4]*(1.1333333333333333 + 0.2*mlog2)
                    +a[5]*(1.0222222222222221*mlog)
                    +a[6]*(1.1015873015873017 + 0.14285714285714285*mlog2)
                    +a[7]*(0.8380952380952381*mlog)
                    +a[8]*(1.0430335097001764 + 0.1111111111111111*mlog2)
                );
            }

            double interp(std::vector<double> & data_x, std::vector<double> & data_y, const double x) {
                // Temporary: should handle interpolation systematically via singletons
                // Calls are expensive here

                double res;
                size_t npoints = data_x.size();

                // raw pointers
                gsl_interp_accel *acc = gsl_interp_accel_alloc();
                gsl_interp *interp = gsl_interp_alloc(gsl_interp_cspline, npoints);

                gsl_interp_init(interp, &data_x[0], &data_y[0], npoints);
                int gsl_status = 0;
                gsl_status = gsl_interp_eval_e(interp, &data_x[0], &data_y[0], x, acc, &res);
                if(gsl_status) {
                    std::string errstr = "GSL error: " + std::string(gsl_strerror(gsl_status));
                    throw std::runtime_error(errstr);
                }

                gsl_interp_accel_free(acc);
                gsl_interp_free(interp);

                return res;
            }

            double interp(const double* data_x, const double* data_y, size_t npoints, const double x) {
                // Temporary: should handle interpolation systematically via singletons
                // Calls are expensive here

                double res;
                // size_t npoints = data_x.size();

                // raw pointers
                gsl_interp_accel *acc = gsl_interp_accel_alloc();
                gsl_interp *interp = gsl_interp_alloc(gsl_interp_cspline, npoints);

                gsl_interp_init(interp, &data_x[0], &data_y[0], npoints);
                int gsl_status = 0;
                gsl_status = gsl_interp_eval_e(interp, &data_x[0], &data_y[0], x, acc, &res);
                if(gsl_status) {
                    std::string errstr = "GSL error: " + std::string(gsl_strerror(gsl_status));
                    throw std::runtime_error(errstr);
                }

                gsl_interp_accel_free(acc);
                gsl_interp_free(interp);

                return res;
            }

            double hypg_a_1_1_1_b_2_2_2(const double x) {

                // data range is mapped from (-1e6, 0) -> (0, 1)
                double const x_inv_mapping = x/(-12 + x);
                // precision target for cubic interpolation is 1e-6
                static const double data_x[] = {0.0000000000000000, 0.0039062460937500, 0.0078124921875000, 0.0156249843750000, 0.0195312304687500, 0.0234374765625000, 0.0312499687500000, 0.0351562148437500, 0.0390624609375000, 0.0468749531250000, 0.0507811992187500, 0.0546874453125000, 0.0624999375000000, 0.0664061835937500, 0.0703124296875000, 0.0781249218750000, 0.0820311679687500, 0.0859374140625000, 0.0937499062500000, 0.0976561523437500, 0.1015623984375000, 0.1093748906250000, 0.1132811367187500, 0.1171873828125000, 0.1249998750000000, 0.1289061210937500, 0.1328123671875000, 0.1406248593750000, 0.1445311054687500, 0.1484373515625000, 0.1562498437500000, 0.1601560898437500, 0.1640623359375000, 0.1718748281250000, 0.1757810742187500, 0.1796873203125000, 0.1874998125000000, 0.1914060585937500, 0.1953123046875000, 0.2031247968750000, 0.2109372890625000, 0.2187497812500000, 0.2265622734375000, 0.2343747656250000, 0.2421872578125000, 0.2499997500000000, 0.2578122421875000, 0.2656247343750000, 0.2734372265625000, 0.2812497187500000, 0.2890622109375000, 0.2968747031250000, 0.3046871953125000, 0.3124996875000000, 0.3203121796875000, 0.3281246718750000, 0.3359371640625000, 0.3437496562500000, 0.3515621484375000, 0.3593746406250000, 0.3671871328125000, 0.3749996250000000, 0.3828121171875000, 0.3906246093750000, 0.3984371015625000, 0.4062495937500000, 0.4140620859375000, 0.4218745781250000, 0.4296870703125000, 0.4374995625000000, 0.4453120546875000, 0.4531245468750000, 0.4609370390624999, 0.4687495312500000, 0.4765620234375000, 0.4843745156250000, 0.4921870078125000, 0.4999995000000000, 0.5078119921874999, 0.5156244843750000, 0.5234369765625000, 0.5312494687500000, 0.5390619609375000, 0.5468744531250000, 0.5546869453125001, 0.5624994375000000, 0.5703119296874999, 0.5781244218749999, 0.5859369140624999, 0.5937494062499999, 0.6015618984375000, 0.6093743906250000, 0.6171868828125000, 0.6249993750000000, 0.6328118671875000, 0.6406243593750001, 0.6562493437500000, 0.6718743281249999, 0.6874993125000000, 0.6953118046875000, 0.7031242968750000, 0.7109367890625000, 0.7187492812500000, 0.7265617734375001, 0.7343742656250001, 0.7421867578125001, 0.7499992500000000, 0.7578117421874999, 0.7656242343749999, 0.7734367265625000, 0.7812492187500000, 0.7890617109375000, 0.7968742031250000, 0.8046866953125000, 0.8124991875000001, 0.8203116796875001, 0.8281241718750001, 0.8359366640625001, 0.8437491562500000, 0.8515616484374999, 0.8593741406249999, 0.8671866328125000, 0.8749991250000000, 0.8789053710937500, 0.8828116171875000, 0.8906241093750000, 0.8945303554687500, 0.8984366015625000, 0.9062490937500000, 0.9101553398437499, 0.9140615859374999, 0.9218740781249999, 0.9257803242187499, 0.9296865703124999, 0.9335928164062499, 0.9374990624999999, 0.9414053085937499, 0.9453115546874999, 0.9492178007812500, 0.9531240468750000, 0.9570302929687500, 0.9609365390625000, 0.9648427851562500, 0.9687490312500000, 0.9726552773437500, 0.9765615234375000, 0.9785146464843750, 0.9804677695312500, 0.9843740156250000, 0.9863271386718750, 0.9882802617187501, 0.9902333847656251, 0.9921865078125001, 0.9941396308593751, 0.9960927539062501, 0.9980458769531251, 0.9990224384765625, 0.9999990000000000};
                static const double data_y[] = {1.0000000000000000, 0.9941583929877398, 0.9883521510465745, 0.9768448054284812, 0.9711432221891033, 0.9654760449433876, 0.9542439450347797, 0.9486785398233764, 0.9431465755566899, 0.9321820015427964, 0.9267489070299220, 0.9213482839788568, 0.9106434805773999, 0.9053388140186672, 0.9000656465535604, 0.8896128354009065, 0.8844327048379499, 0.8792830996660734, 0.8690744917209817, 0.8640150021772723, 0.8589850645313900, 0.8490128724204984, 0.8440701320532680, 0.8391559718262925, 0.8294124220512941, 0.8245825482188180, 0.8197802860033563, 0.8102576309261300, 0.8055367561278833, 0.8008425291177979, 0.7915330586366719, 0.7869173362824501, 0.7823273039922284, 0.7732233568201523, 0.7687089667831926, 0.7642193165399559, 0.7553132909937376, 0.7508964449022166, 0.7465033970646480, 0.7377877612736387, 0.7291645203530777, 0.7206318217958313, 0.7121878243784299, 0.7038306986569567, 0.6955586274343231, 0.6873698061976266, 0.6792624435243149, 0.6712347614559194, 0.6632849958381590, 0.6554113966262541, 0.6476122281543372, 0.6398857693678888, 0.6322303140181778, 0.6246441708177264, 0.6171256635558746, 0.6096731311735598, 0.6022849277964757, 0.5949594227258184, 0.5876950003858655, 0.5804900602276731, 0.5733430165882032, 0.5662522985042238, 0.5592163494803361, 0.5522336272104963, 0.5453026032523957, 0.5384217626540494, 0.5315896035319203, 0.5248046365998611, 0.5180653846480998, 0.5113703819714212, 0.5047181737455944, 0.4981073153509825, 0.4915363716421214, 0.4850039161618859, 0.4785085302986579, 0.4720488023846726, 0.4656233267334515, 0.4592307026139130, 0.4528695331583941, 0.4465384242014142, 0.4402359830455434, 0.4339608171502190, 0.4277115327387633, 0.4214867333181869, 0.4152850181056122, 0.4091049803542997, 0.4029452055713061, 0.3968042696177170, 0.3906807366811726, 0.3845731571090184, 0.3784800650888335, 0.3723999761612959, 0.3663313845482948, 0.3602727602768579, 0.3542225460767691, 0.3481791540266612, 0.3361063093165388, 0.3240407635128744, 0.3119682948323468, 0.3059247705619786, 0.2998737489207574, 0.2938131554252623, 0.2877408285031435, 0.2816545100914322, 0.2755518351207863, 0.2694303197118364, 0.2632873478767649, 0.2571201564787214, 0.2509258181516748, 0.2447012218212089, 0.2384430503891427, 0.2321477550471277, 0.2258115255603932, 0.2194302557042400, 0.2129995028313228, 0.2065144402813779, 0.1999698009946798, 0.1933598102246399, 0.1866781046181862, 0.1799176340784925, 0.1730705416444632, 0.1661280149655309, 0.1590801005875836, 0.1555131439463915, 0.1519154688310793, 0.1446211119445585, 0.1409206683676983, 0.1371819504727896, 0.1295803107026743, 0.1257121599092061, 0.1217952166481772, 0.1138014077773262, 0.1097168370871317, 0.1055679378727146, 0.1013496160676611, 0.0970561092213285, 0.0926808517420605, 0.0882163022620624, 0.0836537190049423, 0.0789828622727168, 0.0741915923206841, 0.0692653128846872, 0.0641861795352822, 0.0589319357745224, 0.0534741321275083, 0.0477752628698260, 0.0448200951501434, 0.0417838625672159, 0.0354253761121182, 0.0320745745955113, 0.0285830500427352, 0.0249220635580111, 0.0210501476667170, 0.0169026546168545, 0.0123657102415211, 0.0071870900768604, 0.0041373732987571, 0.0000000000000000};
                static const size_t npoints = 158;

                return interp(data_x, data_y, npoints, x_inv_mapping);
            }

            double L0inc_Dphi_plus_eff_1a(const double Omega, const double Egamma, const double mu, const double omega0, const std::array<const double, 9> a) {

                const double LNLO = std::log(std::pow(mu, 2) / (2.*Egamma * omega0));
                const double LNLO2 = std::pow(LNLO, 2);
                const double xOm = Omega / omega0;
                const double xOm2 = std::pow(xOm, 2);
                const double xOm3 = std::pow(xOm, 3);
                const double xOm4 = std::pow(xOm, 4);
                const double xOm5 = std::pow(xOm, 5);
                const double xOm6 = std::pow(xOm, 6);
                const double xOm7 = std::pow(xOm, 7);
                const double xOm8 = std::pow(xOm, 8);
                const double mexp = std::exp(-xOm);
                const double logxOm = std::log(xOm);
                const double logxOm2 = std::pow(logxOm, 2);
                const double mpi2 = std::pow(mpi, 2);
                const double mei = mexpintei(-xOm);
                const double hyp = hypg_a_1_1_1_b_2_2_2(-xOm);

                return 1/omega0 * (
                    +a[0]*(-1 + LNLO2 + 2*meulergamma*(LNLO - logxOm) - logxOm2 - 2*LNLO*mei + 2*logxOm*mei + mexp - LNLO2*mexp + 2*LNLO*logxOm*mexp - logxOm2*mexp + mpi2/6. - (mexp*mpi2)/6. + 2*xOm*hyp)
                    +a[1]*(2*meulergamma - 2*mei + 2*logxOm*mexp - mexp*xOm + LNLO2*mexp*xOm + logxOm2*mexp*xOm + (mexp*mpi2*xOm)/6. - 2*LNLO*(-1 + mexp + logxOm*mexp*xOm))
                    +a[2]*((18 + 6*LNLO2 + 12*meulergamma*(LNLO - logxOm) - 6*logxOm2 - 12*LNLO*mei + 12*logxOm*mei - 18*mexp - 6*LNLO2*mexp + 12*LNLO*logxOm*mexp - 6*logxOm2*mexp + mpi2 - mexp*mpi2 - 12*mexp*xOm + 24*LNLO*mexp*xOm + 12*LNLO2*mexp*xOm - 24*logxOm*mexp*xOm - 24*LNLO*logxOm*mexp*xOm + 12*logxOm2*mexp*xOm + 2*mexp*mpi2*xOm + 12*mexp*xOm2 - 12*LNLO2*mexp*xOm2 + 24*LNLO*logxOm*mexp*xOm2 - 12*logxOm2*mexp*xOm2 - 2*mexp*mpi2*xOm2 + 12*xOm*hyp)/18.)
                    +a[3]*((24*meulergamma - 24*mei + 24*logxOm*mexp - 6*mexp*xOm + 18*LNLO2*mexp*xOm - 12*logxOm*mexp*xOm + 18*logxOm2*mexp*xOm + 3*mexp*mpi2*xOm + 18*mexp*xOm2 - 18*LNLO2*mexp*xOm2 + 12*logxOm*mexp*xOm2 - 18*logxOm2*mexp*xOm2 - 3*mexp*mpi2*xOm2 - 6*mexp*xOm3 + 6*LNLO2*mexp*xOm3 + 6*logxOm2*mexp*xOm3 + mexp*mpi2*xOm3 - 12*LNLO*(-2 + mexp*(2 - xOm + 3*logxOm*xOm + xOm2 - 3*logxOm*xOm2 + logxOm*xOm3)))/18.)
                    +a[4]*((102 + 18*LNLO2 + 36*meulergamma*(LNLO - logxOm) - 18*logxOm2 - 36*LNLO*mei + 36*logxOm*mei - 102*mexp - 18*LNLO2*mexp + 36*LNLO*logxOm*mexp - 18*logxOm2*mexp + 3*mpi2 - 3*mexp*mpi2 - 48*mexp*xOm + 144*LNLO*mexp*xOm + 72*LNLO2*mexp*xOm - 144*logxOm*mexp*xOm - 144*LNLO*logxOm*mexp*xOm + 72*logxOm2*mexp*xOm + 12*mexp*mpi2*xOm + 120*mexp*xOm2 - 72*LNLO*mexp*xOm2 - 144*LNLO2*mexp*xOm2 + 72*logxOm*mexp*xOm2 + 288*LNLO*logxOm*mexp*xOm2 - 144*logxOm2*mexp*xOm2 - 24*mexp*mpi2*xOm2 - 72*mexp*xOm3 + 24*LNLO*mexp*xOm3 + 72*LNLO2*mexp*xOm3 - 24*logxOm*mexp*xOm3 - 144*LNLO*logxOm*mexp*xOm3 + 72*logxOm2*mexp*xOm3 + 12*mexp*mpi2*xOm3 + 12*mexp*xOm4 - 12*LNLO2*mexp*xOm4 + 24*LNLO*logxOm*mexp*xOm4 - 12*logxOm2*mexp*xOm4 - 2*mexp*mpi2*xOm4 + 36*xOm*hyp)/90.)
                    +a[5]*((276*meulergamma - 276*mei + 276*logxOm*mexp - 6*mexp*xOm + 270*LNLO2*mexp*xOm - 264*logxOm*mexp*xOm + 270*logxOm2*mexp*xOm + 45*mexp*mpi2*xOm + 468*mexp*xOm2 - 540*LNLO2*mexp*xOm2 + 408*logxOm*mexp*xOm2 - 540*logxOm2*mexp*xOm2 - 90*mexp*mpi2*xOm2 - 396*mexp*xOm3 + 420*LNLO2*mexp*xOm3 - 144*logxOm*mexp*xOm3 + 420*logxOm2*mexp*xOm3 + 70*mexp*mpi2*xOm3 + 120*mexp*xOm4 - 120*LNLO2*mexp*xOm4 + 24*logxOm*mexp*xOm4 - 120*logxOm2*mexp*xOm4 - 20*mexp*mpi2*xOm4 - 12*mexp*xOm5 + 12*LNLO2*mexp*xOm5 + 12*logxOm2*mexp*xOm5 + 2*mexp*mpi2*xOm5 - 12*LNLO*(-23 + mexp*(23 - 22*xOm + 45*logxOm*xOm + 34*xOm2 - 90*logxOm*xOm2 - 12*xOm3 + 70*logxOm*xOm3 + 2*xOm4 - 20*logxOm*xOm4 + 2*logxOm*xOm5)))/270.)
                    +a[6]*((2082 + 270*LNLO2 + 540*meulergamma*(LNLO - logxOm) - 270*logxOm2 - 540*LNLO*mei + 540*logxOm*mei - 2082*mexp - 270*LNLO2*mexp + 540*LNLO*logxOm*mexp - 270*logxOm2*mexp + 45*mpi2 - 45*mexp*mpi2 - 732*mexp*xOm + 3240*LNLO*mexp*xOm + 1620*LNLO2*mexp*xOm - 3240*logxOm*mexp*xOm - 3240*LNLO*logxOm*mexp*xOm + 1620*logxOm2*mexp*xOm + 270*mexp*mpi2*xOm + 3684*mexp*xOm2 - 3240*LNLO*mexp*xOm2 - 4860*LNLO2*mexp*xOm2 + 3240*logxOm*mexp*xOm2 + 9720*LNLO*logxOm*mexp*xOm2 - 4860*logxOm2*mexp*xOm2 - 810*mexp*mpi2*xOm2 - 4392*mexp*xOm3 + 2040*LNLO*mexp*xOm3 + 4680*LNLO2*mexp*xOm3 - 2040*logxOm*mexp*xOm3 - 9360*LNLO*logxOm*mexp*xOm3 + 4680*logxOm2*mexp*xOm3 + 780*mexp*mpi2*xOm3 + 1932*mexp*xOm4 - 480*LNLO*mexp*xOm4 - 1980*LNLO2*mexp*xOm4 + 480*logxOm*mexp*xOm4 + 3960*LNLO*logxOm*mexp*xOm4 - 1980*logxOm2*mexp*xOm4 - 330*mexp*mpi2*xOm4 - 360*mexp*xOm5 + 48*LNLO*mexp*xOm5 + 360*LNLO2*mexp*xOm5 - 48*logxOm*mexp*xOm5 - 720*LNLO*logxOm*mexp*xOm5 + 360*logxOm2*mexp*xOm5 + 60*mexp*mpi2*xOm5 + 24*mexp*xOm6 - 24*LNLO2*mexp*xOm6 + 48*LNLO*logxOm*mexp*xOm6 - 24*logxOm2*mexp*xOm6 - 4*mexp*mpi2*xOm6 + 540*xOm*hyp)/1890.)
                    +a[7]*((1584*meulergamma - 1584*mei + 1584*logxOm*mexp + 306*mexp*xOm + 1890*LNLO2*mexp*xOm - 2196*logxOm*mexp*xOm + 1890*logxOm2*mexp*xOm + 315*mexp*mpi2*xOm + 4482*mexp*xOm2 - 5670*LNLO2*mexp*xOm2 + 4572*logxOm*mexp*xOm2 - 5670*logxOm2*mexp*xOm2 - 945*mexp*mpi2*xOm2 - 6294*mexp*xOm3 + 6930*LNLO2*mexp*xOm3 - 3096*logxOm*mexp*xOm3 + 6930*logxOm2*mexp*xOm3 + 1155*mexp*mpi2*xOm3 + 3660*mexp*xOm4 - 3780*LNLO2*mexp*xOm4 + 1116*logxOm*mexp*xOm4 - 3780*logxOm2*mexp*xOm4 - 630*mexp*mpi2*xOm4 - 996*mexp*xOm5 + 1008*LNLO2*mexp*xOm5 - 180*logxOm*mexp*xOm5 + 1008*logxOm2*mexp*xOm5 + 168*mexp*mpi2*xOm5 + 126*mexp*xOm6 - 126*LNLO2*mexp*xOm6 + 12*logxOm*mexp*xOm6 - 126*logxOm2*mexp*xOm6 - 21*mexp*mpi2*xOm6 - 6*mexp*xOm7 + 6*LNLO2*mexp*xOm7 + 6*logxOm2*mexp*xOm7 + mexp*mpi2*xOm7 - 12*LNLO*(-132 + mexp*(132 - 183*xOm + 315*logxOm*xOm + 381*xOm2 - 945*logxOm*xOm2 - 258*xOm3 + 1155*logxOm*xOm3 + 93*xOm4 - 630*logxOm*xOm4 - 15*xOm5 + 168*logxOm*xOm5 + xOm6 - 21*logxOm*xOm6 + logxOm*xOm7)))/1890.)
                    +a[8]*((17742 + 1890*LNLO2 + 3780*meulergamma*(LNLO - logxOm) - 1890*logxOm2 - 3780*LNLO*mei + 3780*logxOm*mei - 17742*mexp - 1890*LNLO2*mexp + 3780*LNLO*logxOm*mexp - 1890*logxOm2*mexp + 315*mpi2 - 315*mexp*mpi2 - 4512*mexp*xOm + 30240*LNLO*mexp*xOm + 15120*LNLO2*mexp*xOm - 30240*logxOm*mexp*xOm - 30240*LNLO*logxOm*mexp*xOm + 15120*logxOm2*mexp*xOm + 2520*mexp*mpi2*xOm + 43104*mexp*xOm2 - 45360*LNLO*mexp*xOm2 - 60480*LNLO2*mexp*xOm2 + 45360*logxOm*mexp*xOm2 + 120960*LNLO*logxOm*mexp*xOm2 - 60480*logxOm2*mexp*xOm2 - 10080*mexp*mpi2*xOm2 - 77472*mexp*xOm3 + 42000*LNLO*mexp*xOm3 + 85680*LNLO2*mexp*xOm3 - 42000*logxOm*mexp*xOm3 - 171360*LNLO*logxOm*mexp*xOm3 + 85680*logxOm2*mexp*xOm3 + 14280*mexp*mpi2*xOm3 + 55392*mexp*xOm4 - 18480*LNLO*mexp*xOm4 - 57960*LNLO2*mexp*xOm4 + 18480*logxOm*mexp*xOm4 + 115920*LNLO*logxOm*mexp*xOm4 - 57960*logxOm2*mexp*xOm4 - 9660*mexp*mpi2*xOm4 - 19800*mexp*xOm5 + 4368*LNLO*mexp*xOm5 + 20160*LNLO2*mexp*xOm5 - 4368*logxOm*mexp*xOm5 - 40320*LNLO*logxOm*mexp*xOm5 + 20160*logxOm2*mexp*xOm5 + 3360*mexp*mpi2*xOm5 + 3672*mexp*xOm6 - 504*LNLO*mexp*xOm6 - 3696*LNLO2*mexp*xOm6 + 504*logxOm*mexp*xOm6 + 7392*LNLO*logxOm*mexp*xOm6 - 3696*logxOm2*mexp*xOm6 - 616*mexp*mpi2*xOm6 - 336*mexp*xOm7 + 24*LNLO*mexp*xOm7 + 336*LNLO2*mexp*xOm7 - 24*logxOm*mexp*xOm7 - 672*LNLO*logxOm*mexp*xOm7 + 336*logxOm2*mexp*xOm7 + 56*mexp*mpi2*xOm7 + 12*mexp*xOm8 - 12*LNLO2*mexp*xOm8 + 24*LNLO*logxOm*mexp*xOm8 - 12*logxOm2*mexp*xOm8 - 2*mexp*mpi2*xOm8 + 3780*xOm*hyp)/17010.)
                );
            }

            double L0inc_Dphi_plus_eff_1b(const double Omega, const double Egamma, const double mu, const double omega0, const std::array<const double, 9> a) {

                const double LNLO = std::log(std::pow(mu, 2) / (2.*Egamma * omega0));
                const double xOm = Omega / omega0;
                const double xOm2 = std::pow(xOm, 2);
                const double xOm3 = std::pow(xOm, 3);
                const double xOm4 = std::pow(xOm, 4);
                const double xOm5 = std::pow(xOm, 5);
                const double xOm6 = std::pow(xOm, 6);
                const double xOm7 = std::pow(xOm, 7);
                const double xOm8 = std::pow(xOm, 8);
                const double mexp = std::exp(-xOm);
                const double mlog = std::log(xOm);
                const double mlog2 = std::pow(mlog, 2);
                const double mei = mexpintei(-xOm);
                const double hyp = hypg_a_1_1_1_b_2_2_2(-xOm);

                return 1/omega0 * (
                    +a[0]*(-((3 + 2*LNLO)*meulergamma*mexp) + mei*(3 + 2*LNLO - 2*meulergamma - 4*mlog) - (3 + 2*LNLO)*mexp*mlog + 2*meulergamma*(2 + mexp)*mlog + 2*mexp*mlog2 + 2*(meulergamma2 + mlog2 - 2*hyp*xOm))
                    +a[1]*(2*mei - 2*mexp*(meulergamma + mlog) + mexp*(meulergamma*(3 + 2*LNLO - 2*mlog) + 3*mlog + 2*LNLO*mlog - 2*mlog2)*xOm)
                    +a[2]*((mei*(3 + 2*LNLO - 2*meulergamma - 4*mlog) + 4*meulergamma*mlog + 4*mexp*(LNLO + mlog2*(-1 + xOm))*xOm + 2*mexp*(mlog2 + 3*xOm) + 2*(meulergamma2 + mlog2 - 2*hyp*xOm) - (3 + 2*LNLO)*mexp*mlog*(1 + 2*(-1 + xOm)*xOm) + meulergamma*mexp*(-3 + 2*(5 - 3*xOm)*xOm + LNLO*(-2 - 4*(-1 + xOm)*xOm) + mlog*(2 + 4*(-1 + xOm)*xOm)))/3.)
                    +a[3]*((4*mei + mexp*(-4*(meulergamma + mlog) + (8 + 4*LNLO + meulergamma*(11 + 6*LNLO - 6*mlog) + 7*mlog + 6*LNLO*mlog - 6*mlog2)*xOm - (6 + 4*LNLO + meulergamma*(11 + 6*LNLO - 6*mlog) + 7*mlog + 6*LNLO*mlog - 6*mlog2)*xOm2 + (meulergamma*(3 + 2*LNLO - 2*mlog) + 3*mlog + 2*LNLO*mlog - 2*mlog2)*xOm3))/3.)
                    +a[4]*((-3*(3 + 2*LNLO)*meulergamma*mexp + mei*(9 + 6*LNLO - 6*meulergamma - 12*mlog) - 3*(3 + 2*LNLO)*mexp*mlog + 6*meulergamma*(2 + mexp)*mlog + 6*mexp*mlog2 + 4*mexp*(14 + 3*meulergamma*(5 + 2*LNLO - 2*mlog) + 7*mlog + LNLO*(8 + 6*mlog) - 6*mlog2)*xOm + 6*(meulergamma2 + mlog2 - 2*hyp*xOm) - 2*mexp*(31 + 6*meulergamma*(7 + 4*LNLO - 4*mlog) + 24*mlog + 6*LNLO*(3 + 4*mlog) - 24*mlog2)*xOm2 + 2*mexp*(9 + 4*meulergamma*(5 + 3*LNLO - 3*mlog) + 14*mlog + 6*LNLO*(1 + 2*mlog) - 12*mlog2)*xOm3 - 2*mexp*(meulergamma*(3 + 2*LNLO - 2*mlog) + (3 + 2*LNLO)*mlog - 2*mlog2)*xOm4)/15.)
                    +a[5]*((46*mei + mexp*(-46*(meulergamma + mlog) + (196 + 96*LNLO + meulergamma*(179 + 90*LNLO - 90*mlog) + 83*mlog + 90*LNLO*mlog - 90*mlog2)*xOm - 2*(162 + 96*LNLO + meulergamma*(169 + 90*LNLO - 90*mlog) + 73*mlog + 90*LNLO*mlog - 90*mlog2)*xOm2 + 2*(78 + 48*LNLO + meulergamma*(117 + 70*LNLO - 70*mlog) + 69*mlog + 70*LNLO*mlog - 70*mlog2)*xOm3 - 8*(3 + 2*LNLO + meulergamma*(8 + 5*LNLO - 5*mlog) + 6*mlog + 5*LNLO*mlog - 5*mlog2)*xOm4 + 2*(meulergamma*(3 + 2*LNLO - 2*mlog) + 3*mlog + 2*LNLO*mlog - 2*mlog2)*xOm5))/45.)
                    +a[6]*((-45*((3 + 2*LNLO)*meulergamma*mexp - 2*meulergamma*(2 + mexp)*mlog + mei*(-3 - 2*LNLO + 2*meulergamma + 4*mlog) + mexp*(3*mlog + 2*LNLO*mlog - 2*mlog2)) + 6*mexp*(265 + 45*meulergamma*(5 + 2*LNLO - 2*mlog) + 83*mlog + 2*LNLO*(71 + 45*mlog) - 90*mlog2)*xOm + 90*(meulergamma2 + mlog2 - 2*hyp*xOm) - 6*mexp*(549 + 45*meulergamma*(11 + 6*LNLO - 6*mlog) + 185*mlog + 10*LNLO*(31 + 27*mlog) - 270*mlog2)*xOm2 + 2*mexp*(1161 + 20*meulergamma*(67 + 39*LNLO - 39*mlog) + 630*mlog + 10*LNLO*(71 + 78*mlog) - 780*mlog2)*xOm3 - 2*mexp*(316 + 5*meulergamma*(107 + 66*LNLO - 66*mlog) + 335*mlog + 10*LNLO*(20 + 33*mlog) - 330*mlog2)*xOm4 + 4*mexp*(15 + meulergamma*(47 + 30*LNLO - 30*mlog) + 37*mlog + 10*LNLO*(1 + 3*mlog) - 30*mlog2)*xOm5 - 4*mexp*(meulergamma*(3 + 2*LNLO - 2*mlog) + (3 + 2*LNLO)*mlog - 2*mlog2)*xOm6)/315.)
                    +a[7]*((264*mei + mexp*(-264*(meulergamma + mlog) + 3*(588 + 284*LNLO + (437 + 210*LNLO)*meulergamma + 153*mlog + 210*(LNLO - meulergamma)*mlog - 210*mlog2)*xOm - 3*(1496 + 852*LNLO + (1199 + 630*LNLO)*meulergamma + 347*mlog + 630*(LNLO - meulergamma)*mlog - 630*mlog2)*xOm2 + (4054 + 3*meulergamma*(1327 + 770*LNLO - 770*mlog) + 1557*mlog + 6*LNLO*(404 + 385*mlog) - 2310*mlog2)*xOm3 - 2*(803 + 502*LNLO + 6*(173 + 105*LNLO)*meulergamma + 536*mlog + 630*(LNLO - meulergamma)*mlog - 630*mlog2)*xOm4 + 2*(140 + 90*LNLO + 3*meulergamma*(89 + 56*LNLO - 56*mlog) + 177*mlog + 168*LNLO*mlog - 168*mlog2)*xOm5 - (18 + meulergamma*(65 + 42*LNLO - 42*mlog) + 53*mlog + 6*LNLO*(2 + 7*mlog) - 42*mlog2)*xOm6 + (meulergamma*(3 + 2*LNLO - 2*mlog) + 3*mlog + 2*LNLO*mlog - 2*mlog2)*xOm7))/315.)
                    +a[8]*((-315*((3 + 2*LNLO)*meulergamma*mexp - 2*meulergamma*(2 + mexp)*mlog + mei*(-3 - 2*LNLO + 2*meulergamma + 4*mlog) + mexp*(3*mlog + 2*LNLO*mlog - 2*mlog2)) + 72*mexp*(240 + 35*meulergamma*(5 + 2*LNLO - 2*mlog) + 51*mlog + 2*LNLO*(62 + 35*mlog) - 70*mlog2)*xOm + 630*(meulergamma2 + mlog2 - 2*hyp*xOm) - 36*mexp*(1437 + 70*meulergamma*(15 + 8*LNLO - 8*mlog) + 252*mlog + 14*LNLO*(57 + 40*mlog) - 560*mlog2)*xOm2 + 4*mexp*(14379 + 140*meulergamma*(89 + 51*LNLO - 51*mlog) + 3906*mlog + 14*LNLO*(611 + 510*mlog) - 7140*mlog2)*xOm3 - 4*mexp*(7383 + 35*meulergamma*(229 + 138*LNLO - 138*mlog) + 3465*mlog + 70*LNLO*(65 + 69*mlog) - 4830*mlog2)*xOm4 + 4*mexp*(14*meulergamma*(193 + 120*LNLO - 120*mlog) + 70*LNLO*(17 + 24*mlog) + 3*(625 + 504*mlog - 560*mlog2))*xOm5 - 2*mexp*(453 + 14*meulergamma*(69 + 44*LNLO - 44*mlog) + 672*mlog + 14*LNLO*(21 + 44*mlog) - 616*mlog2)*xOm6 + 2*mexp*(21 + meulergamma*(86 + 56*LNLO - 56*mlog) + 72*mlog + 14*LNLO*(1 + 4*mlog) - 56*mlog2)*xOm7 - 2*mexp*(meulergamma*(3 + 2*LNLO - 2*mlog) + (3 + 2*LNLO)*mlog - 2*mlog2)*xOm8)/2835.)
                );
            }

            double hypg_a_1_1_b_2_2_d_0_0_0_1_0(const double x) {

                // data range is mapped from (-1e6, 0) -> (0, 1)
                double const x_inv_mapping = x/(-4 + x);
                // precision target for cubic interpolation is 1e-6
                static const double data_x[] {0.0000000000000000, 0.0039062460937500, 0.0078124921875000, 0.0117187382812500, 0.0156249843750000, 0.0195312304687500, 0.0234374765625000, 0.0273437226562500, 0.0312499687500000, 0.0351562148437500, 0.0390624609375000, 0.0429687070312500, 0.0468749531250000, 0.0507811992187500, 0.0546874453125000, 0.0585936914062500, 0.0624999375000000, 0.0664061835937500, 0.0703124296875000, 0.0742186757812500, 0.0781249218750000, 0.0820311679687500, 0.0859374140625000, 0.0898436601562500, 0.0937499062500000, 0.0976561523437500, 0.1015623984375000, 0.1054686445312500, 0.1093748906250000, 0.1132811367187500, 0.1171873828125000, 0.1210936289062500, 0.1249998750000000, 0.1289061210937500, 0.1328123671875000, 0.1367186132812500, 0.1406248593750000, 0.1445311054687500, 0.1484373515625000, 0.1523435976562500, 0.1562498437500000, 0.1601560898437500, 0.1640623359375000, 0.1679685820312500, 0.1718748281250000, 0.1757810742187500, 0.1796873203125000, 0.1835935664062500, 0.1874998125000000, 0.1914060585937500, 0.1953123046875000, 0.1992185507812500, 0.2031247968750000, 0.2070310429687500, 0.2109372890625000, 0.2148435351562500, 0.2187497812500000, 0.2226560273437500, 0.2265622734375000, 0.2304685195312500, 0.2343747656250000, 0.2382810117187500, 0.2421872578125000, 0.2460935039062500, 0.2499997500000000, 0.2539059960937500, 0.2578122421875000, 0.2617184882812500, 0.2656247343750000, 0.2695309804687500, 0.2734372265625000, 0.2773434726562500, 0.2812497187500000, 0.2851559648437499, 0.2890622109375000, 0.2929684570312500, 0.2968747031250000, 0.3007809492187500, 0.3046871953125000, 0.3085934414062500, 0.3124996875000000, 0.3164059335937500, 0.3203121796875000, 0.3242184257812500, 0.3281246718750000, 0.3320309179687500, 0.3359371640625000, 0.3398434101562500, 0.3437496562500000, 0.3476559023437500, 0.3515621484375000, 0.3554683945312500, 0.3593746406250000, 0.3632808867187500, 0.3671871328125000, 0.3710933789062500, 0.3749996250000000, 0.3789058710937500, 0.3828121171875000, 0.3867183632812500, 0.3906246093750000, 0.3945308554687500, 0.3984371015625000, 0.4023433476562500, 0.4062495937500000, 0.4101558398437500, 0.4140620859375000, 0.4179683320312501, 0.4218745781250000, 0.4257808242187500, 0.4296870703125000, 0.4335933164062500, 0.4374995625000000, 0.4414058085937500, 0.4453120546875000, 0.4492183007812500, 0.4531245468750000, 0.4570307929687499, 0.4609370390624999, 0.4648432851562500, 0.4687495312500000, 0.4726557773437500, 0.4765620234375000, 0.4804682695312500, 0.4843745156250000, 0.4882807617187500, 0.4921870078125000, 0.4960932539062500, 0.4999995000000000, 0.5039057460937499, 0.5078119921874999, 0.5117182382812500, 0.5156244843750000, 0.5195307304687500, 0.5234369765625000, 0.5273432226562500, 0.5312494687500000, 0.5351557148437500, 0.5390619609375000, 0.5429682070312500, 0.5468744531250000, 0.5507806992187501, 0.5546869453125001, 0.5585931914062501, 0.5624994375000000, 0.5664056835937499, 0.5703119296874999, 0.5742181757812499, 0.5781244218749999, 0.5820306679687499, 0.5859369140624999, 0.5898431601562499, 0.5937494062499999, 0.5976556523437500, 0.6015618984375000, 0.6054681445312500, 0.6093743906250000, 0.6132806367187500, 0.6171868828125000, 0.6210931289062500, 0.6249993750000000, 0.6289056210937500, 0.6328118671875000, 0.6367181132812501, 0.6406243593750001, 0.6445306054687501, 0.6484368515625001, 0.6523430976562501, 0.6562493437500000, 0.6601555898437499, 0.6640618359374999, 0.6679680820312499, 0.6718743281249999, 0.6757805742187499, 0.6796868203124999, 0.6835930664062499, 0.6874993125000000, 0.6914055585937500, 0.6953118046875000, 0.6992180507812500, 0.7031242968750000, 0.7070305429687500, 0.7109367890625000, 0.7148430351562500, 0.7187492812500000, 0.7226555273437500, 0.7265617734375001, 0.7304680195312501, 0.7343742656250001, 0.7382805117187501, 0.7421867578125001, 0.7460930039062501, 0.7499992500000000, 0.7539054960937499, 0.7578117421874999, 0.7617179882812499, 0.7656242343749999, 0.7695304804687499, 0.7734367265625000, 0.7773429726562500, 0.7812492187500000, 0.7851554648437500, 0.7890617109375000, 0.7929679570312500, 0.7968742031250000, 0.8007804492187500, 0.8046866953125000, 0.8085929414062500, 0.8124991875000001, 0.8164054335937501, 0.8203116796875001, 0.8242179257812501, 0.8281241718750001, 0.8320304179687501, 0.8359366640625001, 0.8398429101562501, 0.8437491562500000, 0.8476554023437499, 0.8515616484374999, 0.8554678945312499, 0.8593741406249999, 0.8632803867187500, 0.8671866328125000, 0.8710928789062500, 0.8749991250000000, 0.8789053710937500, 0.8828116171875000, 0.8867178632812500, 0.8906241093750000, 0.8945303554687500, 0.8984366015625000, 0.9023428476562501, 0.9062490937500000, 0.9082022167968749, 0.9101553398437499, 0.9140615859374999, 0.9160147089843749, 0.9179678320312499, 0.9218740781249999, 0.9238272011718749, 0.9257803242187499, 0.9296865703124999, 0.9316396933593749, 0.9335928164062499, 0.9374990624999999, 0.9394521855468749, 0.9414053085937499, 0.9453115546874999, 0.9472646777343749, 0.9492178007812500, 0.9531240468750000, 0.9550771699218750, 0.9570302929687500, 0.9589834160156250, 0.9609365390625000, 0.9628896621093750, 0.9648427851562500, 0.9667959082031250, 0.9687490312500000, 0.9707021542968750, 0.9726552773437500, 0.9746084003906250, 0.9765615234375000, 0.9785146464843750, 0.9804677695312500, 0.9824208925781250, 0.9843740156250000, 0.9863271386718750, 0.9882802617187501, 0.9892568232421876, 0.9902333847656251, 0.9921865078125001, 0.9931630693359376, 0.9941396308593751, 0.9951161923828126, 0.9960927539062501, 0.9970693154296876, 0.9980458769531251, 0.9990224384765625, 0.9995107192382813, 0.9999990000000000};
                static const double data_y[] {0.0000000000000000, 0.0019494341650450, 0.0038914284669273, 0.0058258893267273, 0.0077527225949886, 0.0096718335548274, 0.0115831269252528, 0.0134865068647041, 0.0153818769748094, 0.0172691403043711, 0.0191481993535844, 0.0210189560784937, 0.0228813118956928, 0.0247351676872748, 0.0265804238060372, 0.0284169800809481, 0.0302447358228797, 0.0320635898306150, 0.0338734403971336, 0.0356741853161833, 0.0374657218891426, 0.0392479469321821, 0.0410207567837296, 0.0427840473122461, 0.0445377139243186, 0.0462816515730776, 0.0480157547669436, 0.0497399175787116, 0.0514540336549784, 0.0531579962259209, 0.0548516981154304, 0.0565350317516116, 0.0582078891776518, 0.0598701620630676, 0.0615217417153349, 0.0631625190919116, 0.0647923848126566, 0.0664112291726538, 0.0680189421554483, 0.0696154134466999, 0.0712005324482620, 0.0727741882926921, 0.0743362698582007, 0.0758866657840449, 0.0774252644863743, 0.0789519541745333, 0.0804666228678295, 0.0819691584127713, 0.0834594485007828, 0.0849373806864012, 0.0864028424059631, 0.0878557209967850, 0.0892959037168429, 0.0907232777649586, 0.0921377303014948, 0.0935391484695665, 0.0949274194167717, 0.0963024303174471, 0.0976640683954516, 0.0990122209474823, 0.1003467753669271, 0.1016676191682549, 0.1029746400119490, 0.1042677257299834, 0.1055467643518462, 0.1068116441311102, 0.1080622535725525, 0.1092984814598226, 0.1105202168836610, 0.1117273492706651, 0.1129197684126036, 0.1140973644962763, 0.1152600281339166, 0.1164076503941355, 0.1175401228334000, 0.1186573375280440, 0.1197591871068052, 0.1208455647838809, 0.1219163643924969, 0.1229714804189801, 0.1240108080373256, 0.1250342431442494, 0.1260416823947134, 0.1270330232379118, 0.1280081639537048, 0.1289670036894845, 0.1299094424974568, 0.1308353813723220, 0.1317447222893360, 0.1326373682427301, 0.1335132232844689, 0.1343721925633224, 0.1352141823642280, 0.1360391001479141, 0.1368468545907590, 0.1376373556248537, 0.1384105144782360, 0.1391662437152641, 0.1399044572770909, 0.1406250705222041, 0.1413280002669892, 0.1420131648262753, 0.1426804840538186, 0.1433298793826765, 0.1439612738654240, 0.1445745922141606, 0.1451697608402541, 0.1457467078937649, 0.1463053633024922, 0.1468456588105802, 0.1473675280166205, 0.1478709064111845, 0.1483557314137151, 0.1488219424087069, 0.1492694807810994, 0.1496982899508042, 0.1501083154062881, 0.1504995047371265, 0.1508718076654417, 0.1512251760761368, 0.1515595640458333, 0.1518749278704179, 0.1521712260910998, 0.1524484195188791, 0.1527064712573235, 0.1529453467235455, 0.1531650136672746, 0.1533654421879110, 0.1535466047494480, 0.1537084761931488, 0.1538510337478570, 0.1539742570378234, 0.1540781280879244, 0.1541626313261503, 0.1542277535832356, 0.1542734840893066, 0.1542998144674155, 0.1543067387238334, 0.1542942532349713, 0.1542623567307983, 0.1542110502746250, 0.1541403372391231, 0.1540502232784486, 0.1539407162963385, 0.1538118264100527, 0.1536635659100322, 0.1534959492151468, 0.1533089928234097, 0.1531027152580340, 0.1528771370087147, 0.1526322804680176, 0.1523681698627627, 0.1520848311802946, 0.1517822920895328, 0.1514605818567025, 0.1511197312556511, 0.1507597724726587, 0.1503807390056589, 0.1499826655577897, 0.1495655879252015, 0.1491295428790549, 0.1486745680416462, 0.1482007017566062, 0.1477079829531217, 0.1471964510041366, 0.1466661455784944, 0.1461171064869883, 0.1455493735222899, 0.1449629862927327, 0.1443579840499256, 0.1437344055101784, 0.1430922886697173, 0.1424316706136705, 0.1417525873187986, 0.1410550734499433, 0.1403391621501558, 0.1396048848244619, 0.1388522709172047, 0.1380813476828908, 0.1372921399504474, 0.1364846698807726, 0.1356589567174344, 0.1348150165303403, 0.1339528619521614, 0.1330725019072503, 0.1321739413327411, 0.1312571808914632, 0.1303222166762340, 0.1293690399050214, 0.1283976366063853, 0.1274079872945139, 0.1264000666330665, 0.1253738430869195, 0.1243292785607840, 0.1232663280235225, 0.1221849391168315, 0.1210850517467852, 0.1199665976565406, 0.1188294999782913, 0.1176736727623170, 0.1164990204807169, 0.1153054375031157, 0.1140928075413114, 0.1128610030594627, 0.1116098846460112, 0.1103393003430711, 0.1090490849285034, 0.1077390591453093, 0.1064090288723108, 0.1050587842293334, 0.1036880986092418, 0.1022967276281851, 0.1008844079842677, 0.0994508562135340, 0.0979957673306222, 0.0965188133396424, 0.0950196415987369, 0.0934978730193059, 0.0919531000779621, 0.0903848846158183, 0.0887927553955834, 0.0871762053820123, 0.0855346887053220, 0.0838676172600224, 0.0821743568829103, 0.0804542230433597, 0.0787064759659973, 0.0769303150897513, 0.0751248727472315, 0.0732892069233272, 0.0714222929202839, 0.0695230137163175, 0.0675901487532783, 0.0666107086950009, 0.0656223608221823, 0.0636181806282873, 0.0626019437292555, 0.0615759885023123, 0.0594939925706736, 0.0584374547751791, 0.0573702024896724, 0.0552023975634305, 0.0541012231425472, 0.0529880876684684, 0.0507244648461554, 0.0495731820709986, 0.0484083426148083, 0.0460360788626732, 0.0448276072815311, 0.0436034763916744, 0.0411056524162698, 0.0398305272527474, 0.0385368639255316, 0.0372237710323088, 0.0358902685894090, 0.0345352745625388, 0.0331575885362366, 0.0317558717216962, 0.0303286222183275, 0.0288741440349857, 0.0273905077749643, 0.0258754999838590, 0.0243265567631168, 0.0227406750338798, 0.0211142911914191, 0.0194431106649468, 0.0177218607627844, 0.0159439181422156, 0.0141007197255096, 0.0131512131407799, 0.0121807724340095, 0.0101678480765908, 0.0091193232381536, 0.0080372985562515, 0.0069159622225416, 0.0057471225171468, 0.0045183600390773, 0.0032085515710022, 0.0017731461793306, 0.0009717935716340, 0.0000035335249754};
                static const size_t npoints = 281;

                return interp(data_x, data_y, npoints, x_inv_mapping);
            }

            double hypg_a_1_1_b_2_2_d_0_0_0_1_1(const double x) {

                // data range is mapped from (-1e6, 0) -> (0, 1)
                double const x_inv_mapping = x/(-4 + x);
                // precision target for cubic interpolation is 1e-6
                static const double data_x[] {0.0000000000000000, 0.0039062460937500, 0.0078124921875000, 0.0117187382812500, 0.0156249843750000, 0.0195312304687500, 0.0234374765625000, 0.0273437226562500, 0.0312499687500000, 0.0351562148437500, 0.0390624609375000, 0.0429687070312500, 0.0468749531250000, 0.0507811992187500, 0.0546874453125000, 0.0585936914062500, 0.0624999375000000, 0.0664061835937500, 0.0703124296875000, 0.0742186757812500, 0.0781249218750000, 0.0820311679687500, 0.0859374140625000, 0.0898436601562500, 0.0937499062500000, 0.0976561523437500, 0.1015623984375000, 0.1054686445312500, 0.1093748906250000, 0.1132811367187500, 0.1171873828125000, 0.1210936289062500, 0.1249998750000000, 0.1289061210937500, 0.1328123671875000, 0.1367186132812500, 0.1406248593750000, 0.1445311054687500, 0.1484373515625000, 0.1523435976562500, 0.1562498437500000, 0.1601560898437500, 0.1640623359375000, 0.1679685820312500, 0.1718748281250000, 0.1757810742187500, 0.1796873203125000, 0.1835935664062500, 0.1874998125000000, 0.1914060585937500, 0.1953123046875000, 0.1992185507812500, 0.2031247968750000, 0.2070310429687500, 0.2109372890625000, 0.2148435351562500, 0.2187497812500000, 0.2226560273437500, 0.2265622734375000, 0.2304685195312500, 0.2343747656250000, 0.2382810117187500, 0.2421872578125000, 0.2460935039062500, 0.2499997500000000, 0.2539059960937500, 0.2578122421875000, 0.2617184882812500, 0.2656247343750000, 0.2695309804687500, 0.2734372265625000, 0.2773434726562500, 0.2812497187500000, 0.2851559648437499, 0.2890622109375000, 0.2929684570312500, 0.2968747031250000, 0.3007809492187500, 0.3046871953125000, 0.3085934414062500, 0.3124996875000000, 0.3164059335937500, 0.3203121796875000, 0.3242184257812500, 0.3281246718750000, 0.3320309179687500, 0.3359371640625000, 0.3398434101562500, 0.3437496562500000, 0.3476559023437500, 0.3515621484375000, 0.3554683945312500, 0.3593746406250000, 0.3632808867187500, 0.3671871328125000, 0.3710933789062500, 0.3749996250000000, 0.3789058710937500, 0.3828121171875000, 0.3867183632812500, 0.3906246093750000, 0.3945308554687500, 0.3984371015625000, 0.4023433476562500, 0.4062495937500000, 0.4101558398437500, 0.4140620859375000, 0.4179683320312501, 0.4218745781250000, 0.4257808242187500, 0.4296870703125000, 0.4335933164062500, 0.4374995625000000, 0.4414058085937500, 0.4453120546875000, 0.4492183007812500, 0.4531245468750000, 0.4570307929687499, 0.4609370390624999, 0.4648432851562500, 0.4687495312500000, 0.4726557773437500, 0.4765620234375000, 0.4804682695312500, 0.4843745156250000, 0.4882807617187500, 0.4921870078125000, 0.4960932539062500, 0.4999995000000000, 0.5039057460937499, 0.5078119921874999, 0.5117182382812500, 0.5156244843750000, 0.5234369765625000, 0.5273432226562500, 0.5312494687500000, 0.5390619609375000, 0.5429682070312500, 0.5468744531250000, 0.5546869453125001, 0.5585931914062501, 0.5624994375000000, 0.5703119296874999, 0.5742181757812499, 0.5781244218749999, 0.5859369140624999, 0.5898431601562499, 0.5937494062499999, 0.6015618984375000, 0.6054681445312500, 0.6093743906250000, 0.6171868828125000, 0.6210931289062500, 0.6249993750000000, 0.6328118671875000, 0.6367181132812501, 0.6406243593750001, 0.6484368515625001, 0.6523430976562501, 0.6562493437500000, 0.6640618359374999, 0.6679680820312499, 0.6718743281249999, 0.6796868203124999, 0.6835930664062499, 0.6874993125000000, 0.6953118046875000, 0.6992180507812500, 0.7031242968750000, 0.7109367890625000, 0.7187492812500000, 0.7265617734375001, 0.7343742656250001, 0.7421867578125001, 0.7499992500000000, 0.7578117421874999, 0.7656242343749999, 0.7734367265625000, 0.7812492187500000, 0.7890617109375000, 0.7968742031250000, 0.8046866953125000, 0.8124991875000001, 0.8203116796875001, 0.8281241718750001, 0.8437491562500000, 0.8593741406249999, 0.8671866328125000, 0.8749991250000000, 0.8828116171875000, 0.8906241093750000, 0.8984366015625000, 0.9062490937500000, 0.9140615859374999, 0.9218740781249999, 0.9296865703124999, 0.9374990624999999, 0.9453115546874999, 0.9531240468750000, 0.9609365390625000, 0.9687490312500000, 0.9765615234375000, 0.9804677695312500, 0.9843740156250000, 0.9921865078125001, 0.9960927539062501, 0.9999990000000000};
                static const double data_y[] {-0.1250000000000000, -0.1235558658249852, -0.1221170184759929, -0.1206835174490849, -0.1192554224618543, -0.1178327934476991, -0.1164156905498895, -0.1150041741154252, -0.1135983046886775, -0.1121981430048129, -0.1108037499829920, -0.1094151867193419, -0.1080325144796940, -0.1066557946920858, -0.1052850889390198, -0.1039204589494766, -0.1025619665906752, -0.1012096738595783, -0.0998636428741358, -0.0985239358642626, -0.0971906151625452, -0.0958637431946735, -0.0945433824695901, -0.0932295955693563, -0.0919224451387255, -0.0906219938744220, -0.0893283045141188, -0.0880414398251100, -0.0867614625926725, -0.0854884356081116, -0.0842224216564864, -0.0829634835040097, -0.0817116838851167, -0.0804670854891982, -0.0792297509469939, -0.0779997428166394, -0.0767771235693633, -0.0755619555748296, -0.0743543010861199, -0.0731542222243507, -0.0719617809629227, -0.0707770391113955, -0.0696000582989843, -0.0684308999576750, -0.0672696253049518, -0.0661162953261341, -0.0649709707563196, -0.0638337120619274, -0.0627045794218401, -0.0615836327081395, -0.0604709314664332, -0.0593665348957691, -0.0582705018281345, -0.0571828907075376, -0.0561037595686682, -0.0550331660151357, -0.0539711671972829, -0.0529178197895731, -0.0518731799675497, -0.0508373033843666, -0.0498102451468900, -0.0487920597913693, -0.0477828012586789, -0.0467825228691305, -0.0457912772968563, -0.0448091165437657, -0.0438360919130761, -0.0428722539824202, -0.0419176525765332, -0.0409723367395230, -0.0400363547067263, -0.0391097538761570, -0.0381925807795499, -0.0372848810530075, -0.0363866994072545, -0.0354980795975082, -0.0346190643929736, -0.0337496955459689, -0.0328900137606948, -0.0320400586616546, -0.0311998687617389, -0.0303694814299845, -0.0295489328590236, -0.0287382580322345, -0.0279374906906107, -0.0271466632993639, -0.0263658070142781, -0.0255949516478339, -0.0248341256351212, -0.0240833559995623, -0.0233426683184665, -0.0226120866884408, -0.0218916336906791, -0.0211813303561582, -0.0204811961307660, -0.0197912488403924, -0.0191115046560115, -0.0184419780587880, -0.0177826818052408, -0.0171336268924977, -0.0164948225236798, -0.0158662760734507, -0.0152479930537732, -0.0146399770799126, -0.0140422298367307, -0.0134547510453156, -0.0128775384299931, -0.0123105876857687, -0.0117538924462492, -0.0112074442520975, -0.0106712325200726, -0.0101452445127109, -0.0096294653087060, -0.0091238777740458, -0.0086284625339674, -0.0081431979457920, -0.0076680600727051, -0.0072030226585454, -0.0067480571036712, -0.0063031324419736, -0.0058682153191040, -0.0054432699719912, -0.0050282582097174, -0.0046231393958297, -0.0042278704321611, -0.0038424057442372, -0.0034666972683455, -0.0031006944403453, -0.0027443441862957, -0.0023975909149808, -0.0020603765124100, -0.0017326403383721, -0.0014143192251221, -0.0008056568799992, -0.0005151766945408, -0.0002338336762269, 0.0003017463257751, 0.0005561422430556, 0.0008017188262207, 0.0012667587384433, 0.0014864004320544, 0.0016975794638405, 0.0020949319820289, 0.0022813023529515, 0.0024596037500883, 0.0027924174061432, 0.0029471437725396, 0.0030942292741455, 0.0033659276686001, 0.0034907701967745, 0.0036084310001183, 0.0038226856850915, 0.0039195226406826, 0.0040096638654414, 0.0041703609473082, 0.0042411708579454, 0.0043057929706487, 0.0044169938250063, 0.0044638348190246, 0.0045050123301091, 0.0045709092034097, 0.0045958959891502, 0.0046157539400851, 0.0046406216342974, 0.0046459007994905, 0.0046465897735420, 0.0046347350405608, 0.0046224595626193, 0.0046061301594390, 0.0045618408239977, 0.0045029227472987, 0.0044304188708822, 0.0043453567711508, 0.0042487462980402, 0.0041415774777552, 0.0040248187069510, 0.0038994152604154, 0.0037662881282566, 0.0036263331921027, 0.0034804207432199, 0.0033293953391779, 0.0031740759901812, 0.0030152566619044, 0.0028537070790492, 0.0026901738132483, 0.0023600351587877, 0.0020304082606532, 0.0018674543255909, 0.0017066041878403, 0.0015484952542815, 0.0013937605595234, 0.0012430328955793, 0.0010969496896764, 0.0009561588808497, 0.0008213261636451, 0.0006931441534068, 0.0005723443347200, 0.0004597131862118, 0.0003561148496028, 0.0002625246293297, 0.0001800817448329, 0.0001101798358275, 0.0000804766552739, 0.0000546430401231, 0.0000161496571136, 0.0000046751592665, 0.0000000000008209};
                static const size_t npoints = 207;

                return interp(data_x, data_y, npoints, x_inv_mapping);
            }

            double hypg_a_1_1_b_2_2_d_0_0_0_1_2(const double x) {

                // data range is mapped from (-1e6, 0) -> (0, 1)
                double const x_inv_mapping = x/(-4 + x);
                // precision target for cubic interpolation is 1e-6
                static const double data_x[] {0.0000000000000000, 0.0039062460937500, 0.0078124921875000, 0.0117187382812500, 0.0156249843750000, 0.0195312304687500, 0.0234374765625000, 0.0273437226562500, 0.0312499687500000, 0.0351562148437500, 0.0390624609375000, 0.0429687070312500, 0.0468749531250000, 0.0507811992187500, 0.0546874453125000, 0.0585936914062500, 0.0624999375000000, 0.0664061835937500, 0.0703124296875000, 0.0742186757812500, 0.0781249218750000, 0.0820311679687500, 0.0859374140625000, 0.0898436601562500, 0.0937499062500000, 0.0976561523437500, 0.1015623984375000, 0.1054686445312500, 0.1093748906250000, 0.1132811367187500, 0.1171873828125000, 0.1210936289062500, 0.1249998750000000, 0.1289061210937500, 0.1328123671875000, 0.1367186132812500, 0.1406248593750000, 0.1445311054687500, 0.1484373515625000, 0.1523435976562500, 0.1562498437500000, 0.1601560898437500, 0.1640623359375000, 0.1679685820312500, 0.1718748281250000, 0.1757810742187500, 0.1796873203125000, 0.1835935664062500, 0.1874998125000000, 0.1914060585937500, 0.1953123046875000, 0.1992185507812500, 0.2031247968750000, 0.2070310429687500, 0.2109372890625000, 0.2148435351562500, 0.2187497812500000, 0.2226560273437500, 0.2265622734375000, 0.2304685195312500, 0.2343747656250000, 0.2382810117187500, 0.2421872578125000, 0.2460935039062500, 0.2499997500000000, 0.2539059960937500, 0.2578122421875000, 0.2617184882812500, 0.2656247343750000, 0.2695309804687500, 0.2734372265625000, 0.2773434726562500, 0.2812497187500000, 0.2851559648437499, 0.2890622109375000, 0.2929684570312500, 0.2968747031250000, 0.3007809492187500, 0.3046871953125000, 0.3085934414062500, 0.3124996875000000, 0.3164059335937500, 0.3203121796875000, 0.3242184257812500, 0.3281246718750000, 0.3320309179687500, 0.3359371640625000, 0.3398434101562500, 0.3437496562500000, 0.3476559023437500, 0.3515621484375000, 0.3554683945312500, 0.3593746406250000, 0.3632808867187500, 0.3671871328125000, 0.3710933789062500, 0.3749996250000000, 0.3789058710937500, 0.3828121171875000, 0.3867183632812500, 0.3906246093750000, 0.3945308554687500, 0.3984371015625000, 0.4023433476562500, 0.4062495937500000, 0.4101558398437500, 0.4140620859375000, 0.4179683320312501, 0.4218745781250000, 0.4257808242187500, 0.4296870703125000, 0.4335933164062500, 0.4374995625000000, 0.4414058085937500, 0.4453120546875000, 0.4492183007812500, 0.4531245468750000, 0.4570307929687499, 0.4609370390624999, 0.4648432851562500, 0.4687495312500000, 0.4726557773437500, 0.4765620234375000, 0.4804682695312500, 0.4843745156250000, 0.4921870078125000, 0.4960932539062500, 0.4999995000000000, 0.5078119921874999, 0.5117182382812500, 0.5156244843750000, 0.5234369765625000, 0.5273432226562500, 0.5312494687500000, 0.5390619609375000, 0.5429682070312500, 0.5468744531250000, 0.5546869453125001, 0.5585931914062501, 0.5624994375000000, 0.5703119296874999, 0.5742181757812499, 0.5781244218749999, 0.5859369140624999, 0.5898431601562499, 0.5937494062499999, 0.6015618984375000, 0.6054681445312500, 0.6093743906250000, 0.6171868828125000, 0.6210931289062500, 0.6249993750000000, 0.6328118671875000, 0.6367181132812501, 0.6406243593750001, 0.6484368515625001, 0.6523430976562501, 0.6562493437500000, 0.6640618359374999, 0.6718743281249999, 0.6796868203124999, 0.6874993125000000, 0.6953118046875000, 0.7031242968750000, 0.7109367890625000, 0.7187492812500000, 0.7265617734375001, 0.7343742656250001, 0.7421867578125001, 0.7499992500000000, 0.7578117421874999, 0.7656242343749999, 0.7734367265625000, 0.7812492187500000, 0.7890617109375000, 0.7968742031250000, 0.8046866953125000, 0.8124991875000001, 0.8281241718750001, 0.8437491562500000, 0.8593741406249999, 0.8749991250000000, 0.8828116171875000, 0.8906241093750000, 0.9062490937500000, 0.9140615859374999, 0.9218740781249999, 0.9374990624999999, 0.9453115546874999, 0.9531240468750000, 0.9687490312500000, 0.9765615234375000, 0.9843740156250000, 0.9999990000000000};
                static const double data_y[] {-0.0925925925925926, -0.0915367918340707, -0.0904853017288529, -0.0894381656561913, -0.0883954270907969, -0.0873571295971853, -0.0863233168238511, -0.0852940324972690, -0.0842693204157169, -0.0832492244429193, -0.0822337885015060, -0.0812230565662849, -0.0802170726573235, -0.0792158808328377, -0.0782195251818828, -0.0772280498168453, -0.0762414988657305, -0.0752599164642431, -0.0742833467476582, -0.0733118338424780, -0.0723454218578722, -0.0713841548768980, -0.0704280769474960, -0.0694772320732600, -0.0685316642039759, -0.0675914172259275, -0.0666565349519657, -0.0657270611113370, -0.0648030393392695, -0.0638845131663125, -0.0629715260074260, -0.0620641211508183, -0.0611623417465279, -0.0602662307947465, -0.0593758311338808, -0.0584911854283502, -0.0576123361561170, -0.0567393255959473, -0.0558721958143991, -0.0550109886525367, -0.0541557457123663, -0.0533065083429938, -0.0524633176265001, -0.0516262143635331, -0.0507952390586144, -0.0499704319051588, -0.0491518327702051, -0.0483394811788570, -0.0475334162984326, -0.0467336769223218, -0.0459403014535505, -0.0451533278880517, -0.0443727937976421, -0.0435987363127049, -0.0428311921045792, -0.0420701973676549, -0.0413157878011762, -0.0405679985907527, -0.0398268643895802, -0.0390924192993732, -0.0383646968510106, -0.0376437299848973, -0.0369295510310445, -0.0362221916888714, -0.0355216830067331, -0.0348280553611772, -0.0341413384359349, -0.0334615612006512, -0.0327887518893593, -0.0321229379787059, -0.0314641461659340, -0.0308124023466290, -0.0301677315922386, -0.0295301581273717, -0.0288997053068877, -0.0282763955927855, -0.0276602505309005, -0.0270512907274245, -0.0264495358252568, -0.0258550044802007, -0.0252677143370197, -0.0246876820053653, -0.0241149230355937, -0.0235494518944866, -0.0229912819408922, -0.0224404254013057, -0.0218968933454069, -0.0213606956615753, -0.0208318410324031, -0.0203103369102283, -0.0197961894927108, -0.0192894036984746, -0.0187899831428427, -0.0182979301136897, -0.0178132455474405, -0.0173359290052423, -0.0168659786493418, -0.0164033912196969, -0.0159481620108554, -0.0155002848491359, -0.0150597520701433, -0.0146265544966574, -0.0142006814169300, -0.0137821205634315, -0.0133708580920847, -0.0129668785620295, -0.0125701649159592, -0.0121806984610747, -0.0117984588506994, -0.0114234240666041, -0.0110555704020878, -0.0106948724458646, -0.0103413030668076, -0.0099948333995998, -0.0096554328313465, -0.0093230689892024, -0.0089977077290681, -0.0086793131254125, -0.0083678474622775, -0.0080632712255228, -0.0077655430963701, -0.0074746199463044, -0.0071904568333930, -0.0069130070000824, -0.0066422218725337, -0.0061204423651992, -0.0058693417730695, -0.0056246934724205, -0.0051545215323254, -0.0049288773365876, -0.0047094443453420, -0.0042889515846130, -0.0040877573266531, -0.0038925053388075, -0.0035195407940982, -0.0033416804997141, -0.0031694670615045, -0.0028416681550848, -0.0026859226793646, -0.0025355041255668, -0.0022503123529280, -0.0021153681495894, -0.0019854090001676, -0.0017400906290268, -0.0016245510613711, -0.0015136359767293, -0.0013053078909022, -0.0012077071163347, -0.0011143554177251, -0.0009400160360374, -0.0008588353844074, -0.0007815180276282, -0.0006380829712837, -0.0005717695991922, -0.0005089283453810, -0.0003932702209779, -0.0003402576630535, -0.0002903260244856, -0.0001993173462271, -0.0001194727685444, -0.0000500306847399, 0.0000097579218754, 0.0000606267710789, 0.0001032916841431, 0.0001384481208921, 0.0001667688880756, 0.0001889020501067, 0.0002054690705757, 0.0002170632092729, 0.0002242481947470, 0.0002275571867863, 0.0002274920367640, 0.0002245228467877, 0.0002190878212949, 0.0002115933975105, 0.0002024146344009, 0.0001918958338106, 0.0001803513627194, 0.0001552992677260, 0.0001292151570925, 0.0001036507073424, 0.0000797938362560, 0.0000687874508492, 0.0000585088694674, 0.0000403731919531, 0.0000325961907488, 0.0000257087541639, 0.0000146069702374, 0.0000103618276218, 0.0000069449346932, 0.0000023886647772, 0.0000011088029502, 0.0000003717014763, 0.0000000000000000};
                static const size_t npoints = 194;

                return interp(data_x, data_y, npoints, x_inv_mapping);
            }

            double hypg_a_1_1_b_2_2_d_0_0_0_1_3(const double x) {

                // data range is mapped from (-1e6, 0) -> (0, 1)
                double const x_inv_mapping = x/(-4 + x);
                // precision target for cubic interpolation is 1e-6
                static const double data_x[] {0.0000000000000000, 0.0039062460937500, 0.0078124921875000, 0.0117187382812500, 0.0156249843750000, 0.0195312304687500, 0.0234374765625000, 0.0273437226562500, 0.0312499687500000, 0.0351562148437500, 0.0390624609375000, 0.0429687070312500, 0.0468749531250000, 0.0507811992187500, 0.0546874453125000, 0.0585936914062500, 0.0624999375000000, 0.0664061835937500, 0.0703124296875000, 0.0742186757812500, 0.0781249218750000, 0.0820311679687500, 0.0859374140625000, 0.0898436601562500, 0.0937499062500000, 0.0976561523437500, 0.1015623984375000, 0.1054686445312500, 0.1093748906250000, 0.1132811367187500, 0.1171873828125000, 0.1210936289062500, 0.1249998750000000, 0.1289061210937500, 0.1328123671875000, 0.1367186132812500, 0.1406248593750000, 0.1445311054687500, 0.1484373515625000, 0.1523435976562500, 0.1562498437500000, 0.1601560898437500, 0.1640623359375000, 0.1679685820312500, 0.1718748281250000, 0.1757810742187500, 0.1796873203125000, 0.1835935664062500, 0.1874998125000000, 0.1914060585937500, 0.1953123046875000, 0.1992185507812500, 0.2031247968750000, 0.2070310429687500, 0.2109372890625000, 0.2148435351562500, 0.2187497812500000, 0.2226560273437500, 0.2265622734375000, 0.2304685195312500, 0.2343747656250000, 0.2382810117187500, 0.2421872578125000, 0.2460935039062500, 0.2499997500000000, 0.2539059960937500, 0.2578122421875000, 0.2617184882812500, 0.2656247343750000, 0.2695309804687500, 0.2734372265625000, 0.2773434726562500, 0.2812497187500000, 0.2851559648437499, 0.2890622109375000, 0.2929684570312500, 0.2968747031250000, 0.3007809492187500, 0.3046871953125000, 0.3085934414062500, 0.3124996875000000, 0.3164059335937500, 0.3203121796875000, 0.3242184257812500, 0.3281246718750000, 0.3320309179687500, 0.3359371640625000, 0.3398434101562500, 0.3437496562500000, 0.3476559023437500, 0.3515621484375000, 0.3554683945312500, 0.3593746406250000, 0.3632808867187500, 0.3671871328125000, 0.3710933789062500, 0.3749996250000000, 0.3789058710937500, 0.3828121171875000, 0.3867183632812500, 0.3906246093750000, 0.3945308554687500, 0.3984371015625000, 0.4023433476562500, 0.4062495937500000, 0.4101558398437500, 0.4140620859375000, 0.4179683320312501, 0.4218745781250000, 0.4257808242187500, 0.4296870703125000, 0.4335933164062500, 0.4374995625000000, 0.4414058085937500, 0.4453120546875000, 0.4492183007812500, 0.4531245468750000, 0.4570307929687499, 0.4609370390624999, 0.4648432851562500, 0.4687495312500000, 0.4726557773437500, 0.4765620234375000, 0.4843745156250000, 0.4882807617187500, 0.4921870078125000, 0.4999995000000000, 0.5039057460937499, 0.5078119921874999, 0.5156244843750000, 0.5195307304687500, 0.5234369765625000, 0.5312494687500000, 0.5351557148437500, 0.5390619609375000, 0.5468744531250000, 0.5507806992187501, 0.5546869453125001, 0.5624994375000000, 0.5664056835937499, 0.5703119296874999, 0.5781244218749999, 0.5820306679687499, 0.5859369140624999, 0.5937494062499999, 0.5976556523437500, 0.6015618984375000, 0.6093743906250000, 0.6132806367187500, 0.6171868828125000, 0.6249993750000000, 0.6289056210937500, 0.6328118671875000, 0.6406243593750001, 0.6445306054687501, 0.6484368515625001, 0.6562493437500000, 0.6640618359374999, 0.6718743281249999, 0.6796868203124999, 0.6874993125000000, 0.6953118046875000, 0.7031242968750000, 0.7109367890625000, 0.7187492812500000, 0.7265617734375001, 0.7343742656250001, 0.7421867578125001, 0.7499992500000000, 0.7578117421874999, 0.7656242343749999, 0.7734367265625000, 0.7812492187500000, 0.7890617109375000, 0.7968742031250000, 0.8046866953125000, 0.8124991875000001, 0.8281241718750001, 0.8437491562500000, 0.8593741406249999, 0.8749991250000000, 0.8906241093750000, 0.9062490937500000, 0.9218740781249999, 0.9374990624999999, 0.9531240468750000, 0.9687490312500000, 0.9843740156250000, 0.9999990000000000};
                static const double data_y[] {-0.0677083333333333, -0.0669080398885679, -0.0661113466582041, -0.0653182867310031, -0.0645288932271553, -0.0637431992930979, -0.0629612380961919, -0.0621830428192554, -0.0614086466549526, -0.0606380828000343, -0.0598713844494290, -0.0591085847901805, -0.0583497169952325, -0.0575948142170540, -0.0568439095811064, -0.0560970361791489, -0.0553542270623786, -0.0546155152344047, -0.0538809336440539, -0.0531505151780042, -0.0524242926532453, -0.0517022988093634, -0.0509845663006474, -0.0502711276880156, -0.0495620154307594, -0.0488572618781026, -0.0481568992605739, -0.0474609596811907, -0.0467694751064522, -0.0460824773571397, -0.0453999980989218, -0.0447220688327638, -0.0440487208851387, -0.0433799853980373, -0.0427158933187780, -0.0420564753896126, -0.0414017621371277, -0.0407517838614402, -0.0401065706251856, -0.0394661522422980, -0.0388305582665802, -0.0381998179800646, -0.0375739603811621, -0.0369530141725996, -0.0363370077491460, -0.0357259691851245, -0.0351199262217138, -0.0345189062540355, -0.0339229363180302, -0.0333320430771206, -0.0327462528086642, -0.0321655913901953, -0.0315900842854570, -0.0310197565302262, -0.0304546327179312, -0.0298947369850646, -0.0293400929963941, -0.0287907239299728, -0.0282466524619518, -0.0277079007511983, -0.0271744904237230, -0.0266464425569191, -0.0261237776636186, -0.0256065156759691, -0.0250946759291369, -0.0245882771448402, -0.0240873374147199, -0.0235918741835521, -0.0231019042323112, -0.0226174436610879, -0.0221385078718716, -0.0216651115512051, -0.0211972686527185, -0.0207349923795538, -0.0202782951666880, -0.0198271886631655, -0.0193816837142514, -0.0189417903435158, -0.0185075177348627, -0.0180788742145153, -0.0176558672329715, -0.0172385033469440, -0.0168267882012996, -0.0164207265110137, -0.0160203220431560, -0.0156255775989252, -0.0152364949957503, -0.0148530750494774, -0.0144753175566616, -0.0141032212769855, -0.0137367839158238, -0.0133760021069785, -0.0130208713956060, -0.0126713862213622, -0.0123275399017886, -0.0119893246159667, -0.0116567313884682, -0.0113297500736274, -0.0110083693401655, -0.0106925766561973, -0.0103823582746505, -0.0100776992191290, -0.0097785832702546, -0.0094849929525195, -0.0091969095216846, -0.0089143129527606, -0.0086371819286065, -0.0083654938291857, -0.0080992247215155, -0.0078383493503520, -0.0075828411296487, -0.0073326721348309, -0.0070878130959278, -0.0068482333916044, -0.0066139010441368, -0.0063847827153747, -0.0061608437037358, -0.0059420479422764, -0.0057283579978844, -0.0055197350716394, -0.0053161390003871, -0.0051175282595720, -0.0049238599673767, -0.0045511724496034, -0.0043720607305222, -0.0041977064912006, -0.0038630709207312, -0.0037026865823962, -0.0035468537401799, -0.0032486226173337, -0.0031061113091740, -0.0029679254866718, -0.0027042912634598, -0.0025787205297505, -0.0024572306751953, -0.0022262372138749, -0.0021166029214064, -0.0020107882117372, -0.0018103460421619, -0.0017155807448533, -0.0016243594462793, -0.0014522649845454, -0.0013712482834459, -0.0012934886110731, -0.0011474473668695, -0.0010790182487408, -0.0010135511863271, -0.0008912048093551, -0.0008341758504503, -0.0007798097894315, -0.0006787665856433, -0.0006319397898483, -0.0005874767244697, -0.0005053450147240, -0.0004675289200443, -0.0004317817967271, -0.0003662052045256, -0.0003080434178493, -0.0002567368786252, -0.0002117404453101, -0.0001725254571836, -0.0001385816801595, -0.0001094191057354, -0.0000845695755001, -0.0000635882052528, -0.0000460545853083, -0.0000315737370093, -0.0000197768098218, -0.0000103215085916, -0.0000028922464714, 0.0000027999745098, 0.0000070179465074, 0.0000099988870967, 0.0000119552968722, 0.0000130760159885, 0.0000135274477195, 0.0000134549140211, 0.0000122225975083, 0.0000101763704848, 0.0000078724140361, 0.0000056725639486, 0.0000037869071180, 0.0000023110501723, 0.0000012578550199, 0.0000005840187013, 0.0000002121922798, 0.0000000495396625, 0.0000000039351887, 0.0000000000000000};
                static const size_t npoints = 189;

                return interp(data_x, data_y, npoints, x_inv_mapping);
            }

            double hypg_a_1_1_b_2_2_d_0_0_0_1_4(const double x) {

                // data range is mapped from (-1e6, 0) -> (0, 1)
                double const x_inv_mapping = x/(-4 + x);
                // precision target for cubic interpolation is 1e-6
                static const double data_x[] {0.0000000000000000, 0.0039062460937500, 0.0078124921875000, 0.0117187382812500, 0.0156249843750000, 0.0195312304687500, 0.0234374765625000, 0.0273437226562500, 0.0312499687500000, 0.0351562148437500, 0.0390624609375000, 0.0429687070312500, 0.0468749531250000, 0.0507811992187500, 0.0546874453125000, 0.0585936914062500, 0.0624999375000000, 0.0664061835937500, 0.0703124296875000, 0.0742186757812500, 0.0781249218750000, 0.0820311679687500, 0.0859374140625000, 0.0898436601562500, 0.0937499062500000, 0.0976561523437500, 0.1015623984375000, 0.1054686445312500, 0.1093748906250000, 0.1132811367187500, 0.1171873828125000, 0.1210936289062500, 0.1249998750000000, 0.1289061210937500, 0.1328123671875000, 0.1367186132812500, 0.1406248593750000, 0.1445311054687500, 0.1484373515625000, 0.1523435976562500, 0.1562498437500000, 0.1601560898437500, 0.1640623359375000, 0.1679685820312500, 0.1718748281250000, 0.1757810742187500, 0.1796873203125000, 0.1835935664062500, 0.1874998125000000, 0.1914060585937500, 0.1953123046875000, 0.1992185507812500, 0.2031247968750000, 0.2070310429687500, 0.2109372890625000, 0.2148435351562500, 0.2187497812500000, 0.2226560273437500, 0.2265622734375000, 0.2304685195312500, 0.2343747656250000, 0.2382810117187500, 0.2421872578125000, 0.2460935039062500, 0.2499997500000000, 0.2539059960937500, 0.2578122421875000, 0.2617184882812500, 0.2656247343750000, 0.2695309804687500, 0.2734372265625000, 0.2773434726562500, 0.2812497187500000, 0.2851559648437499, 0.2890622109375000, 0.2929684570312500, 0.2968747031250000, 0.3007809492187500, 0.3046871953125000, 0.3085934414062500, 0.3124996875000000, 0.3164059335937500, 0.3203121796875000, 0.3242184257812500, 0.3281246718750000, 0.3320309179687500, 0.3359371640625000, 0.3398434101562500, 0.3437496562500000, 0.3476559023437500, 0.3515621484375000, 0.3554683945312500, 0.3593746406250000, 0.3632808867187500, 0.3671871328125000, 0.3710933789062500, 0.3749996250000000, 0.3789058710937500, 0.3828121171875000, 0.3867183632812500, 0.3906246093750000, 0.3945308554687500, 0.3984371015625000, 0.4023433476562500, 0.4062495937500000, 0.4101558398437500, 0.4140620859375000, 0.4179683320312501, 0.4218745781250000, 0.4257808242187500, 0.4296870703125000, 0.4335933164062500, 0.4374995625000000, 0.4414058085937500, 0.4453120546875000, 0.4492183007812500, 0.4531245468750000, 0.4570307929687499, 0.4609370390624999, 0.4648432851562500, 0.4687495312500000, 0.4726557773437500, 0.4765620234375000, 0.4843745156250000, 0.4882807617187500, 0.4921870078125000, 0.4999995000000000, 0.5039057460937499, 0.5078119921874999, 0.5156244843750000, 0.5195307304687500, 0.5234369765625000, 0.5312494687500000, 0.5351557148437500, 0.5390619609375000, 0.5468744531250000, 0.5507806992187501, 0.5546869453125001, 0.5624994375000000, 0.5664056835937499, 0.5703119296874999, 0.5781244218749999, 0.5820306679687499, 0.5859369140624999, 0.5937494062499999, 0.5976556523437500, 0.6015618984375000, 0.6093743906250000, 0.6132806367187500, 0.6171868828125000, 0.6249993750000000, 0.6289056210937500, 0.6328118671875000, 0.6406243593750001, 0.6484368515625001, 0.6562493437500000, 0.6640618359374999, 0.6718743281249999, 0.6796868203124999, 0.6874993125000000, 0.6953118046875000, 0.7031242968750000, 0.7109367890625000, 0.7187492812500000, 0.7265617734375001, 0.7343742656250001, 0.7421867578125001, 0.7499992500000000, 0.7578117421874999, 0.7656242343749999, 0.7734367265625000, 0.7812492187500000, 0.7968742031250000, 0.8046866953125000, 0.8124991875000001, 0.8281241718750001, 0.8437491562500000, 0.8593741406249999, 0.8749991250000000, 0.8906241093750000, 0.9062490937500000, 0.9218740781249999, 0.9374990624999999, 0.9531240468750000, 0.9687490312500000, 0.9843740156250000, 0.9999990000000000};
                static const double data_y[] {-0.0513333333333333, -0.0507055078294963, -0.0500807279486127, -0.0494590196914553, -0.0488404090553522, -0.0482249220295445, -0.0476125845904280, -0.0470034226966763, -0.0463974622842444, -0.0457947292612504, -0.0451952495027330, -0.0445990488452853, -0.0440061530815602, -0.0434165879546478, -0.0428303791523221, -0.0422475523011565, -0.0416681329605037, -0.0410921466163425, -0.0405196186749852, -0.0399505744566482, -0.0393850391888815, -0.0388230379998559, -0.0382645959115079, -0.0377097378325394, -0.0371584885512703, -0.0366108727283449, -0.0360669148892880, -0.0355266394169115, -0.0349900705435687, -0.0344572323432569, -0.0339281487235646, -0.0334028434174652, -0.0328813399749542, -0.0323636617545291, -0.0318498319145125, -0.0313398734042161, -0.0308338089549461, -0.0303316610708490, -0.0298334520195969, -0.0293392038229130, -0.0288489382469364, -0.0283626767924259, -0.0278804406848038, -0.0274022508640387, -0.0269281279743688, -0.0264580923538647, -0.0259921640238343, -0.0255303626780686, -0.0250727076719311, -0.0246192180112904, -0.0241699123412988, -0.0237248089350179, -0.0232839256818918, -0.0228472800760728, -0.0224148892045982, -0.0219867697354243, -0.0215629379053170, -0.0211434095076049, -0.0207281998797961, -0.0203173238910629, -0.0199107959295995, -0.0195086298898542, -0.0191108391596440, -0.0187174366071527, -0.0183284345678213, -0.0179438448311338, -0.0175636786273050, -0.0171879466138770, -0.0168166588622312, -0.0164498248440214, -0.0160874534175387, -0.0157295528140123, -0.0153761306238579, -0.0150271937828812, -0.0146827485584459, -0.0143428005356171, -0.0140073546032887, -0.0136764149403085, -0.0133499850016100, -0.0130280675043646, -0.0127106644141661, -0.0123977769312616, -0.0120894054768419, -0.0117855496794059, -0.0114862083612152, -0.0111913795248539, -0.0109010603399095, -0.0106152471297940, -0.0103339353587203, -0.0100571196188556, -0.0097847936176682, -0.0095169501654889, -0.0092535811633088, -0.0089946775908321, -0.0087402294948093, -0.0084902259776712, -0.0082446551864883, -0.0080035043022807, -0.0077667595297024, -0.0075344060871262, -0.0073064281971568, -0.0070828090775982, -0.0068635309329040, -0.0066485749461400, -0.0064379212714869, -0.0062315490273158, -0.0060294362898648, -0.0058315600875497, -0.0056378963959409, -0.0054484201334376, -0.0052631051576748, -0.0050819242626951, -0.0049048491769192, -0.0047318505619518, -0.0045628980122545, -0.0043979600557239, -0.0042370041552087, -0.0040799967110005, -0.0039269030643361, -0.0037776875019452, -0.0036323132616783, -0.0034907425392518, -0.0033529364961440, -0.0030884579783118, -0.0029617027432112, -0.0028385466910661, -0.0026028557803306, -0.0024902303589125, -0.0023810230299396, -0.0021726714243864, -0.0020734293459044, -0.0019774098028011, -0.0017948336070221, -0.0017081726618696, -0.0016245257260342, -0.0014660574383377, -0.0013911262459333, -0.0013189894529875, -0.0011828730490785, -0.0011187791887464, -0.0010572513123664, -0.0009416604664850, -0.0008874801692755, -0.0008356312948575, -0.0007386906479090, -0.0006934799752298, -0.0006503630285676, -0.0005701722473187, -0.0005329795932193, -0.0004976431362633, -0.0004323033097541, -0.0004021829592739, -0.0003736849572818, -0.0003213266523992, -0.0002747751596518, -0.0002335872198037, -0.0001973312921594, -0.0001655892315844, -0.0001379578769906, -0.0001140505276710, -0.0000934982840348, -0.0000759512300857, -0.0000610794364878, -0.0000485737653214, -0.0000381464606854, -0.0000295315131491, -0.0000224847906436, -0.0000167839336240, -0.0000122280180717, -0.0000086369959297, -0.0000058509286191, -0.0000037290350460, -0.0000010036383005, -0.0000002037545133, 0.0000003274436236, 0.0000008273704830, 0.0000008789522863, 0.0000007271833720, 0.0000005167775013, 0.0000003232578495, 0.0000001773575211, 0.0000000832823803, 0.0000000317559943, 0.0000000088355218, 0.0000000014001484, 0.0000000000566561, 0.0000000000000000};
                static const size_t npoints = 187;

                return interp(data_x, data_y, npoints, x_inv_mapping);
            }

            double hypg_a_1_1_b_2_2_d_0_0_0_1_5(const double x) {

                // data range is mapped from (-1e6, 0) -> (0, 1)
                double const x_inv_mapping = x/(-4 + x);
                // precision target for cubic interpolation is 1e-6

                // Derivative[{0, 0}, {0, 1}, 5][HypergeometricPFQ][{1., 1.}, {2., 2.}, (-4*#1)/(1. - 1.*#1)]&
                static const double data_x[] {0.0000000000000000, 0.0039062460937500, 0.0078124921875000, 0.0117187382812500, 0.0156249843750000, 0.0195312304687500, 0.0234374765625000, 0.0273437226562500, 0.0312499687500000, 0.0351562148437500, 0.0390624609375000, 0.0429687070312500, 0.0468749531250000, 0.0507811992187500, 0.0546874453125000, 0.0585936914062500, 0.0624999375000000, 0.0664061835937500, 0.0703124296875000, 0.0742186757812500, 0.0781249218750000, 0.0820311679687500, 0.0859374140625000, 0.0898436601562500, 0.0937499062500000, 0.0976561523437500, 0.1015623984375000, 0.1054686445312500, 0.1093748906250000, 0.1132811367187500, 0.1171873828125000, 0.1210936289062500, 0.1249998750000000, 0.1289061210937500, 0.1328123671875000, 0.1367186132812500, 0.1406248593750000, 0.1445311054687500, 0.1484373515625000, 0.1523435976562500, 0.1562498437500000, 0.1601560898437500, 0.1640623359375000, 0.1679685820312500, 0.1718748281250000, 0.1757810742187500, 0.1796873203125000, 0.1835935664062500, 0.1874998125000000, 0.1914060585937500, 0.1953123046875000, 0.1992185507812500, 0.2031247968750000, 0.2070310429687500, 0.2109372890625000, 0.2148435351562500, 0.2187497812500000, 0.2226560273437500, 0.2265622734375000, 0.2304685195312500, 0.2343747656250000, 0.2382810117187500, 0.2421872578125000, 0.2460935039062500, 0.2499997500000000, 0.2539059960937500, 0.2578122421875000, 0.2617184882812500, 0.2656247343750000, 0.2695309804687500, 0.2734372265625000, 0.2773434726562500, 0.2812497187500000, 0.2851559648437499, 0.2890622109375000, 0.2929684570312500, 0.2968747031250000, 0.3007809492187500, 0.3046871953125000, 0.3085934414062500, 0.3124996875000000, 0.3164059335937500, 0.3203121796875000, 0.3242184257812500, 0.3281246718750000, 0.3320309179687500, 0.3359371640625000, 0.3398434101562500, 0.3437496562500000, 0.3476559023437500, 0.3515621484375000, 0.3554683945312500, 0.3593746406250000, 0.3632808867187500, 0.3671871328125000, 0.3710933789062500, 0.3749996250000000, 0.3789058710937500, 0.3828121171875000, 0.3867183632812500, 0.3906246093750000, 0.3945308554687500, 0.3984371015625000, 0.4023433476562500, 0.4062495937500000, 0.4101558398437500, 0.4140620859375000, 0.4179683320312501, 0.4218745781250000, 0.4257808242187500, 0.4296870703125000, 0.4335933164062500, 0.4374995625000000, 0.4414058085937500, 0.4453120546875000, 0.4492183007812500, 0.4531245468750000, 0.4570307929687499, 0.4609370390624999, 0.4648432851562500, 0.4687495312500000, 0.4765620234375000, 0.4804682695312500, 0.4843745156250000, 0.4921870078125000, 0.4960932539062500, 0.4999995000000000, 0.5078119921874999, 0.5117182382812500, 0.5156244843750000, 0.5234369765625000, 0.5273432226562500, 0.5312494687500000, 0.5390619609375000, 0.5429682070312500, 0.5468744531250000, 0.5546869453125001, 0.5585931914062501, 0.5624994375000000, 0.5703119296874999, 0.5742181757812499, 0.5781244218749999, 0.5859369140624999, 0.5898431601562499, 0.5937494062499999, 0.6015618984375000, 0.6054681445312500, 0.6093743906250000, 0.6171868828125000, 0.6210931289062500, 0.6249993750000000, 0.6328118671875000, 0.6406243593750001, 0.6484368515625001, 0.6562493437500000, 0.6640618359374999, 0.6718743281249999, 0.6796868203124999, 0.6874993125000000, 0.6953118046875000, 0.7031242968750000, 0.7109367890625000, 0.7187492812500000, 0.7265617734375001, 0.7343742656250001, 0.7421867578125001, 0.7499992500000000, 0.7578117421874999, 0.7656242343749999, 0.7812492187500000, 0.7890617109375000, 0.7968742031250000, 0.8124991875000001, 0.8281241718750001, 0.8437491562500000, 0.8593741406249999, 0.8749991250000000, 0.8906241093750000, 0.9062490937500000, 0.9218740781249999, 0.9374990624999999, 0.9531240468750000, 0.9687490312500000, 0.9843740156250000, 0.9999990000000000};
                static const double data_y[] {-0.0402777777777778, -0.0397711478544953, -0.0392671237975230, -0.0387657265308463, -0.0382669769557638, -0.0377708959467606, -0.0372775043472840, -0.0367868229654209, -0.0362988725694747, -0.0358136738834416, -0.0353312475823831, -0.0348516142876957, -0.0343747945622745, -0.0339008089055709, -0.0334296777485418, -0.0329614214484907, -0.0324960602837976, -0.0320336144485383, -0.0315741040469904, -0.0311175490880266, -0.0306639694793919, -0.0302133850218658, -0.0297658154033077, -0.0293212801925836, -0.0288797988333748, -0.0284413906378667, -0.0280060747803161, -0.0275738702904990, -0.0271447960470339, -0.0267188707705847, -0.0262961130169383, -0.0258765411699590, -0.0254601734344191, -0.0250470278287030, -0.0246371221773882, -0.0242304741036990, -0.0238271010218359, -0.0234270201291793, -0.0230302483983669, -0.0226368025692468, -0.0222466991407046, -0.0218599543623667, -0.0214765842261785, -0.0210966044578597, -0.0207200305082368, -0.0203468775444535, -0.0199771604410605, -0.0196108937709859, -0.0192480917963871, -0.0188887684593868, -0.0185329373726934, -0.0181806118101091, -0.0178318046969269, -0.0174865286002193, -0.0171447957190211, -0.0168066178744093, -0.0164720064994822, -0.0161409726292420, -0.0158135268903845, -0.0154896794909978, -0.0151694402101767, -0.0148528183875544, -0.0145398229127584, -0.0142304622147937, -0.0139247442513593, -0.0136226764981038, -0.0133242659378249, -0.0130295190496196, -0.0127384417979923, -0.0124510396219258, -0.0121673174239243, -0.0118872795590356, -0.0116109298238592, -0.0113382714455508, -0.0110693070708307, -0.0108040387550057, -0.0105424679510145, -0.0102845954985064, -0.0100304216129643, -0.0097799458748829, -0.0095331672190140, -0.0092900839236908, -0.0090506936002438, -0.0088149931825216, -0.0085829789165303, -0.0083546463502055, -0.0081299903233320, -0.0079090049576262, -0.0076916836469971, -0.0074780190480029, -0.0072680030705191, -0.0070616268686367, -0.0068588808318087, -0.0066597545762624, -0.0064642369366984, -0.0062723159582956, -0.0060839788890417, -0.0058992121724128, -0.0057180014404202, -0.0055403315070504, -0.0053661863621180, -0.0051955491655567, -0.0050284022421712, -0.0048647270768751, -0.0047045043104387, -0.0045477137357738, -0.0043943342947785, -0.0042443440757711, -0.0040977203115377, -0.0039544393780215, -0.0038144767936799, -0.0036778072195384, -0.0035444044599683, -0.0034142414642151, -0.0032872903287078, -0.0031635223001753, -0.0030429077795986, -0.0029254163270267, -0.0028110166672848, -0.0026996766966004, -0.0025913634901768, -0.0023836816180781, -0.0022842430796238, -0.0021876915820617, -0.0020031014298994, -0.0019149867647007, -0.0018296071501518, -0.0016668931677606, -0.0015894771475650, -0.0015146329136574, -0.0013724894704825, -0.0013051036131277, -0.0012401162960173, -0.0011171580253344, -0.0010590962301518, -0.0010032513519884, -0.0008980259877704, -0.0008485514260813, -0.0008011056996546, -0.0007121094215547, -0.0006704626713238, -0.0006306524373907, -0.0005563476307464, -0.0005217559850797, -0.0004888067950766, -0.0004276419970189, -0.0003993298032501, -0.0003724669838868, -0.0003228986248966, -0.0003000984257750, -0.0002785583741358, -0.0002390737417488, -0.0002040797583458, -0.0001732204162719, -0.0001461500701773, -0.0001225347783560, -0.0001020535656511, -0.0000843995884289, -0.0000692811822700, -0.0000564227737045, -0.0000455656385676, -0.0000364684914525, -0.0000289078932977, -0.0000226784673855, -0.0000175929179154, -0.0000134818497741, -0.0000101933930471, -0.0000075926410239, -0.0000055609157358, -0.0000028055208557, -0.0000019170285768, -0.0000012656072639, -0.0000004714654620, -0.0000001062481128, 0.0000000318050493, 0.0000000628129988, 0.0000000525288517, 0.0000000329429128, 0.0000000167639303, 0.0000000068979595, 0.0000000021771236, 0.0000000004655570, 0.0000000000501290, 0.0000000000010323, 0.0000000000000000};
                static const size_t npoints = 185;

                return interp(data_x, data_y, npoints, x_inv_mapping);
            }

            double hypg_a_1_1_b_2_2_d_0_0_0_1_6(const double x) {

                // data range is mapped from (-1e6, 0) -> (0, 1)
                double const x_inv_mapping = x/(-12 + x);
                // precision target for cubic interpolation is 1e-6
                std::vector<double> data_x {};
                std::vector<double> data_y {};

                return interp(data_x, data_y, x_inv_mapping);
            }

            double hypg_a_1_1_b_2_2_d_0_0_0_1_7(const double x) {

                // data range is mapped from (-1e6, 0) -> (0, 1)
                double const x_inv_mapping = x/(-12 + x);
                // precision target for cubic interpolation is 1e-6
                std::vector<double> data_x {};
                std::vector<double> data_y {};

                return interp(data_x, data_y, x_inv_mapping);
            }

            double hypg_a_1_1_b_2_2_d_0_0_0_1_8(const double x) {

                // data range is mapped from (-1e6, 0) -> (0, 1)
                double const x_inv_mapping = x/(-12 + x);
                // precision target for cubic interpolation is 1e-6
                std::vector<double> data_x {};
                std::vector<double> data_y {};

                return interp(data_x, data_y, x_inv_mapping);
            }

            double L0inc_Dphi_plus_eff_1c(const double Omega, const double Egamma, const double mu, const double omega0, const std::array<const double, 9> a) {

                const double LNLO = std::log(std::pow(mu, 2) / (2.*Egamma * omega0));
                const double xOm = Omega / omega0;
                const double xOm2 = std::pow(xOm, 2);
                const double xOm3 = std::pow(xOm, 3);
                const double xOm4 = std::pow(xOm, 4);
                const double xOm5 = std::pow(xOm, 5);
                const double xOm6 = std::pow(xOm, 6);
                const double xOm7 = std::pow(xOm, 7);
                const double xOm8 = std::pow(xOm, 8);
                const double mexp = std::exp(-xOm);
                const double mlog = std::log(xOm);
                const double mlog2 = std::pow(mlog, 2);
                const double mpi2 = std::pow(mpi, 2);
                const double meim = mexpintei(-xOm);
                const double meip = mexpintei(xOm);
                const double hyp  = hypg_a_1_1_b_2_2_d_0_0_0_1_0(-xOm);
                const double hyp1 = hypg_a_1_1_b_2_2_d_0_0_0_1_1(-xOm);
                const double hyp2 = hypg_a_1_1_b_2_2_d_0_0_0_1_2(-xOm);
                const double hyp3 = hypg_a_1_1_b_2_2_d_0_0_0_1_3(-xOm);
                const double hyp4 = hypg_a_1_1_b_2_2_d_0_0_0_1_4(-xOm);
                const double hyp5 = hypg_a_1_1_b_2_2_d_0_0_0_1_5(-xOm);
                const double hyp6 = hypg_a_1_1_b_2_2_d_0_0_0_1_6(-xOm);
                const double hyp7 = hypg_a_1_1_b_2_2_d_0_0_0_1_7(-xOm);
                const double hyp8 = hypg_a_1_1_b_2_2_d_0_0_0_1_8(-xOm);

                return 1/omega0 * (
                    +a[0]*(2*(-meim + meulergamma + mlog + mexp*(LNLO*meip - (LNLO + meip)*mlog + meulergamma*(-LNLO + mlog) + mlog2) - hyp*xOm))
                    +a[1]*(2*(LNLO + (-1 + mexp)*(-1 + mlog) - (hyp + mexp*(-(meip*mlog) + meulergamma*mlog + mlog2))*xOm + LNLO*mexp*(-1 + (-meip + meulergamma + mlog)*xOm) + hyp1*xOm2))
                    +a[2]*((2*(-meim + meulergamma + mlog + mexp*(LNLO*meip - (LNLO + meip)*mlog + mlog2) - 3*hyp*xOm + 2*(mexp + mlog + (-2 + meip)*mexp*mlog + LNLO*(-1 + mexp*(2 - meip + mlog)) - mexp*mlog2)*xOm - meulergamma*mexp*(LNLO - mlog)*(1 + 2*(-1 + xOm)*xOm) + 2*(3*hyp1 + mexp*(LNLO*meip - (LNLO + meip)*mlog + mlog2))*xOm2 - 2*hyp2*xOm3))/3.)
                    +a[3]*((2*(-2*(-1 + mexp)*(1 + LNLO - mlog) + (-3*hyp + mexp + 2*mlog + LNLO*(-2 + 3*mexp*(1 - meip + meulergamma + mlog)) - 3*mexp*((1 - meip + meulergamma)*mlog + mlog2))*xOm + (9*hyp1 + LNLO - mlog - 3*LNLO*mexp*(1 - meip + meulergamma + mlog) + mexp*(-1 + 3*(1 - meip + meulergamma)*mlog + 3*mlog2))*xOm2 + (-6*hyp2 + mexp*(-(LNLO*meip) + meulergamma*(LNLO - mlog) + (LNLO + meip)*mlog - mlog2))*xOm3 + hyp3*xOm4))/3.)
                    +a[4]*((6*(-meim + mlog + mexp*(LNLO*meip - (LNLO + meip)*mlog + mlog2)) - 30*hyp*xOm - 8*(LNLO*(4 + mexp*(-7 + 3*meip - 3*mlog)) - 4*mlog + mexp*(-3 + 7*mlog - 3*meip*mlog + 3*mlog2))*xOm + 2*meulergamma*(3 + mexp*(LNLO - mlog)*(-3 - 2*xOm*(-6 + xOm*(12 + (-6 + xOm)*xOm)))) + 4*(30*hyp1 - 3*mexp + LNLO*(5 + 12*mexp*(-1 + meip - mlog)) - 5*mlog + 12*mexp*(mlog - meip*mlog + mlog2))*xOm2 - 4*(30*hyp2 + LNLO + LNLO*mexp*(-4 + 6*meip - 6*mlog) - mlog + mexp*(-1 + (4 - 6*meip)*mlog + 6*mlog2))*xOm3 + 4*(10*hyp3 + mexp*(LNLO*meip - (LNLO + meip)*mlog + mlog2))*xOm4 - 4*hyp4*xOm5)/15.)
                    +a[5]*((-46*(-1 + mexp)*(1 + LNLO - mlog) + 2*(-45*hyp + 48*mlog + LNLO*(-48 + 5*mexp*(14 - 9*meip + 9*meulergamma + 9*mlog)) + mexp*(22 - 5*(14 - 9*meip + 9*meulergamma)*mlog - 45*mlog2))*xOm + 2*(225*hyp1 - 2*(27*mlog + LNLO*(-27 + 5*mexp*(13 - 9*meip + 9*meulergamma + 9*mlog)) + mexp*(17 - 5*(13 - 9*meip + 9*meulergamma)*mlog - 45*mlog2)))*xOm2 + 4*(-150*hyp2 + 9*mlog + LNLO*(-9 + 5*mexp*(6 - 7*meip + 7*meulergamma + 7*mlog)) + mexp*(6 - 5*(6 - 7*meip + 7*meulergamma)*mlog - 35*mlog2))*xOm3 - 4*(-75*hyp3 + mexp + mlog + LNLO*(-1 + 5*mexp*(1 - 2*meip + 2*meulergamma + 2*mlog)) - 5*mexp*(mlog - 2*meip*mlog + 2*meulergamma*mlog + 2*mlog2))*xOm4 - 4*(15*hyp4 + mexp*(LNLO*meip - (LNLO + meip)*mlog + meulergamma*(-LNLO + mlog) + mlog2))*xOm5 + 4*hyp5*xOm6)/45.)
                    +a[6]*((2*(45*mexp*(LNLO*meip - (LNLO + meip)*mlog + mlog2) - 6*(LNLO*(71 + mexp*(-116 + 45*meip - 45*mlog)) - 71*mlog + mexp*(-45 + 116*mlog - 45*meip*mlog + 45*mlog2))*xOm - 45*(meim - mlog + 7*hyp*xOm) + meulergamma*(45 + mexp*(LNLO - mlog)*(-45 + 2*xOm*(135 + xOm*(-405 + xOm*(390 + xOm*(-165 - 2*(-15 + xOm)*xOm)))))) + 6*(315*hyp1 + LNLO*(91 + 5*mexp*(-40 + 27*meip - 27*mlog)) - 91*mlog + 5*mexp*(-9 + 40*mlog - 27*meip*mlog + 27*mlog2))*xOm2 + 2*(-1575*hyp2 + 139*mlog + LNLO*(-139 + 10*mexp*(44 - 39*meip + 39*mlog)) + 5*mexp*(17 - 88*mlog + 78*meip*mlog - 78*mlog2))*xOm3 + 2*(1050*hyp3 + LNLO*(28 + 15*mexp*(-8 + 11*meip - 11*mlog)) - 28*mlog + 5*mexp*(-4 + 24*mlog - 33*meip*mlog + 33*mlog2))*xOm4 + 2*(-315*hyp4 + 2*(mexp + mlog + LNLO*(-1 + 3*mexp*(2 - 5*meip + 5*mlog)) + 3*mexp*((-2 + 5*meip)*mlog - 5*mlog2)))*xOm5 + 4*(21*hyp5 + mexp*(LNLO*meip - (LNLO + meip)*mlog + mlog2))*xOm6 - 4*hyp6*xOm7))/315.)
                    +a[7]*((2*(-132*(-1 + mexp)*(1 + LNLO - mlog) + 3*(-105*hyp + 142*mlog + LNLO*(-142 + 7*mexp*(29 - 15*meip + 15*meulergamma + 15*mlog)) + mexp*(61 - 7*(29 - 15*meip + 15*meulergamma)*mlog - 105*mlog2))*xOm + 3*(735*hyp1 - 253*mlog + LNLO*(253 - 7*mexp*(79 - 45*meip + 45*meulergamma + 45*mlog)) + mexp*(-127 + 7*(79 - 45*meip + 45*meulergamma)*mlog + 315*mlog2))*xOm2 + 3*(-1470*hyp2 + 166*mlog + LNLO*(-166 + 35*mexp*(14 - 11*meip + 11*meulergamma + 11*mlog)) + mexp*(86 - 35*(14 - 11*meip + 11*meulergamma)*mlog - 385*mlog2))*xOm3 + (3675*hyp3 - 149*mlog + LNLO*(149 - 35*mexp*(17 - 18*meip + 18*meulergamma + 18*mlog)) + mexp*(-93 + 35*(17 - 18*meip + 18*meulergamma)*mlog + 630*mlog2))*xOm4 + (-1470*hyp4 + 20*mlog + LNLO*(-20 + 21*mexp*(5 - 8*meip + 8*meulergamma + 8*mlog)) - 3*mexp*(-5 + 7*(5 - 8*meip + 8*meulergamma)*mlog + 56*mlog2))*xOm5 + (294*hyp5 + LNLO - mlog - 7*LNLO*mexp*(1 - 3*meip + 3*meulergamma + 3*mlog) + mexp*(-1 + 7*(1 - 3*meip + 3*meulergamma)*mlog + 21*mlog2))*xOm6 + (-28*hyp6 + mexp*(-(LNLO*meip) + meulergamma*(LNLO - mlog) + (LNLO + meip)*mlog - mlog2))*xOm7 + hyp7*xOm8))/315.)
                    +a[8]*((630*(-meim + mlog + mexp*(LNLO*meip - (LNLO + meip)*mlog + mlog2)) - 18*(315*hyp + 8*(LNLO*(62 + mexp*(-97 + 35*meip - 35*mlog)) - 62*mlog + mexp*(-35 + 97*mlog - 35*meip*mlog + 35*mlog2)))*xOm + 2*meulergamma*(315 + mexp*(LNLO - mlog)*(-315 - 2*xOm*(-1260 + xOm*(5040 + xOm*(-7140 + xOm*(4830 + xOm*(-1680 + xOm*(308 + (-28 + xOm)*xOm)))))))) + 72*(630*hyp1 + LNLO*(243 + 56*mexp*(-9 + 5*meip - 5*mlog)) - 243*mlog - 7*mexp*(15 + 8*(-9 + 5*meip)*mlog - 40*mlog2))*xOm2 - 8*(13230*hyp2 + LNLO*(1811 + 14*mexp*(-368 + 255*meip - 255*mlog)) - 1811*mlog + 7*mexp*(-125 + 736*mlog - 510*meip*mlog + 510*mlog2))*xOm3 + 8*(13230*hyp3 + LNLO*(711 + 35*mexp*(-76 + 69*meip - 69*mlog)) - 711*mlog + 35*mexp*(-11 + (76 - 69*meip)*mlog + 69*mlog2))*xOm4 - 8*(6615*hyp4 + LNLO*(141 + 14*mexp*(-49 + 60*meip - 60*mlog)) - 141*mlog + 7*mexp*(-13 + 98*mlog - 120*meip*mlog + 120*mlog2))*xOm5 + 4*(3528*hyp5 + LNLO*(27 + 28*mexp*(-6 + 11*meip - 11*mlog)) - 27*mlog + 7*mexp*(-3 + 24*mlog - 44*meip*mlog + 44*mlog2))*xOm6 - 4*(504*hyp6 + LNLO + 4*LNLO*mexp*(-2 + 7*meip - 7*mlog) - mlog + mexp*(-1 + 8*mlog - 28*meip*mlog + 28*mlog2))*xOm7 + 4*(36*hyp7 + mexp*(LNLO*meip - (LNLO + meip)*mlog + mlog2))*xOm8 - 4*hyp8*mpow(xOm,9))/2835.)                );
            }
        }
    }
}

namespace eos
{
    namespace b_lcdas
    {
        /*!
        * Parametrization of the B-meson LCDAs
        */
        class Param:
            public BMesonLCDAs,
            public PrivateImplementationPattern<Param>
        {
            public:
                Param(const Parameters &, const Options &);
                ~Param();

                /*!
                *  B to gamma l nu
                */
                double L0() const;
                double L0inc(const double & Omega) const;
                double Binc(const double & Omega, const double & sigma) const;

                /*!
                * Leading twist two-particle LCDAs
                * omega: plus-component of the spectator momentum
                */
                double phi_plus(const double & omega) const;
                double phi_minus(const double & omega) const;
                double phi_bar(const double & omega) const;
                double phi_bar_d1(const double & omega) const;

                /*!
                * Next-to-leading twist two-particle LCDAs
                * omega: plus-component of the spectator momentum
                */
                double g_plus(const double & omega) const;
                double g_plus_d1(const double & omega) const;
                double g_plus_d2(const double & omega) const;

                double g_minusWW(const double & omega) const;
                double g_minusWW_d1(const double & omega) const;
                double g_minusWW_d2(const double & omega) const;

                double g_bar(const double & omega) const;
                double g_bar_d1(const double & omega) const;
                double g_bar_d2(const double & omega) const;
                double g_bar_d3(const double & omega) const;

                /*!
                * Leading power three-particle LCDAs
                * omega_1: plus-component of the spectator momentum
                * omega_2: plus-component of the gluon momentum
                * */
                double phi_3(const double & omega_1, const double & omega_2) const;
                double phi_4(const double & omega_1, const double & omega_2) const;

                double phi_bar_3(const double & omega_1, const double & omega_2) const;
                double phi_bar_4(const double & omega_1, const double & omega_2) const;

                double phi_bar2_3(const double & omega_1, const double & omega_2) const;
                double phi_bar2_4(const double & omega_1, const double & omega_2) const;

                double phi_bar_bar_3(const double & omega_1, const double & omega_2) const;
                double phi_bar_bar_4(const double & omega_1, const double & omega_2) const;

                double psi_bar_4(const double & omega_1, const double & omega_2) const;
                double chi_bar_4(const double & omega_1, const double & omega_2) const;

                double psi_bar_bar_4(const double & omega_1, const double & omega_2) const;
                double chi_bar_bar_4(const double & omega_1, const double & omega_2) const;
                /*!
                * Pseudo observables for the two-particle LCDAs
                */
                double inverse_lambda_plus() const;

                /*!
                * Leading power three-particle LCDAs
                * omega: plus-component of the spectator momentum
                * xi:    plus-component of the gluon momentum
                * */
                double psi_A(const double & omega, const double & xi) const;
                double psi_V(const double & omega, const double & xi) const;
                double X_A(const double & omega, const double & xi) const;
                double Y_A(const double & omega, const double & xi) const;

                /*!
                * Auxiliary functions for the three-particle LCDAs
                * See [KMO2006], below eq. (72), p. 28 for their definition.
                */
                double Xbar_A(const double & omega, const double & xi) const;
                double Ybar_A(const double & omega, const double & xi) const;

                /* Internal diagnostics */
                Diagnostics diagnostics() const;
        };
    }
}

#endif
